Create a reusable HeaderBar component for consistent title and toolbar alignment across the Dashboard, Gallery, and other pages. This component will accept props to handle dynamic buttons, titles, and custom controls.

Why Create a HeaderBar Component?
Consistency: Titles and toolbars align uniformly across different pages.
Maintainability: Centralized control for header layouts simplifies future updates.
Flexibility: Pass custom actions (buttons, toolbars) as props based on the page.
üõ†Ô∏è Instructions (Replit):
1. Create the HeaderBar Component:
In src/components, create a new file:
HeaderBar.tsx

Add the following code:

tsx
Copy code
import React from 'react';

interface HeaderBarProps {
  title: string;
  actions?: React.ReactNode;  // Optional toolbar buttons or controls
  subtitle?: string;          // Optional for breadcrumbs or descriptions
}

export default function HeaderBar({ title, actions, subtitle }: HeaderBarProps) {
  return (
    <div className="w-full px-4 sm:px-6 lg:px-8 py-8 border-b">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">{title}</h1>
          {subtitle && (
            <p className="text-sm text-muted-foreground mt-1">{subtitle}</p>
          )}
        </div>
        {actions && (
          <div className="flex space-x-2">
            {actions}
          </div>
        )}
      </div>
    </div>
  );
}
2. Implement in Dashboard.tsx:
Open Dashboard.tsx and replace the existing header section:

Before (inline header):

tsx
Copy code
<AnimatedLayout title="My Projects">
  <div className="px-4 sm:px-6 lg:px-8 py-8">
    <h1 className="text-3xl font-bold">My Projects</h1>
    <button className="btn-primary">New Project</button>
  </div>
</AnimatedLayout>
After (with HeaderBar):

tsx
Copy code
import HeaderBar from './components/HeaderBar';

export default function Dashboard() {
  return (
    <div>
      <HeaderBar
        title="My Projects"
        actions={<button className="btn-primary">New Project</button>}
      />
      {/* Dashboard content */}
    </div>
  );
}
3. Implement in Gallery.tsx:
In Gallery.tsx, update the header rendering logic:

tsx
Copy code
import HeaderBar from './components/HeaderBar';

useEffect(() => {
  if (onHeaderActionsChange && gallery) {
    onHeaderActionsChange(
      <HeaderBar
        title={gallery.title}
        actions={renderGalleryControls()}
      />
    );
  }
}, [gallery, onHeaderActionsChange, renderGalleryControls]);
4. Customizing Header Per Page:
Different Pages Can Pass Custom Actions (buttons or toolbars):

tsx
Copy code
<HeaderBar
  title="Settings"
  actions={
    <div>
      <button className="btn-secondary">Reset</button>
      <button className="btn-primary">Save</button>
    </div>
  }
/>
Breadcrumb Example:

tsx
Copy code
<HeaderBar
  title="Gallery"
  subtitle="Editing: Summer Vacation Album"
  actions={<button>Share</button>}
/>
