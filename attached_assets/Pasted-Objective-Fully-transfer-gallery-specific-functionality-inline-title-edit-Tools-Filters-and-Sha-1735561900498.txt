Objective:
Fully transfer gallery-specific functionality (inline title edit, Tools, Filters, and Share) from Gallery.tsx to the global header in Layout.tsx.
Ensure the gallery header logic merges seamlessly into the layout, preventing duplicate headers.
Remove redundant header code from Gallery.tsx after ensuring all features work within the layout.
1. Transfer Full Functionality to Layout.tsx
Steps:

Open Gallery.tsx and locate the following features:
Inline Title Editing
Tools (Selection Mode Toggle)
Filters Dropdown
Share Button + Modal
Copy the relevant state and functions to Layout.tsx.
From Gallery.tsx (State and Functions to Transfer):

tsx
Copy code
// State for Title Edit, Selection Mode, and Share Modal
const [title, setTitle] = useState(gallery?.title || 'Gallery');
const [isSelectionMode, setIsSelectionMode] = useState(false);
const [isOpenShareModal, setIsOpenShareModal] = useState(false);
const [selectedFilter, setSelectedFilter] = useState(null);

// Handlers for Inline Edit, Tools, and Filters
const handleTitleUpdate = (newTitle) => {
  setTitle(newTitle);
  console.log('Title updated:', newTitle);
};

const toggleSelectionMode = () => {
  setIsSelectionMode(!isSelectionMode);
};

const openShareModal = () => {
  setIsOpenShareModal(true);
};

const closeShareModal = () => {
  setIsOpenShareModal(false);
};

const setFilter = (filter) => {
  setSelectedFilter(filter);
  console.log('Filter applied:', filter);
};
Paste into Layout.tsx (Inside Layout Component):

tsx
Copy code
const [title, setTitle] = useState(gallery?.title || 'Gallery');
const [isSelectionMode, setIsSelectionMode] = useState(false);
const [isOpenShareModal, setIsOpenShareModal] = useState(false);
const [selectedFilter, setSelectedFilter] = useState(null);

// Title Update
const handleTitleUpdate = (newTitle) => {
  setTitle(newTitle);
  console.log('Gallery title updated:', newTitle);
};

// Selection Mode Toggle
const toggleSelectionMode = () => {
  setIsSelectionMode(!isSelectionMode);
};

// Share Modal Handlers
const openShareModal = () => {
  setIsOpenShareModal(true);
};

const closeShareModal = () => {
  setIsOpenShareModal(false);
};

// Filter Handler
const setFilter = (filter) => {
  setSelectedFilter(filter);
  console.log('Filter applied:', filter);
};
2. Connect Functionality to Global Header Buttons
Attach the handlers for Tools, Filters, and Share directly to the gallery-specific buttons in the layout.
Dynamically render these buttons only for gallery pages.
Updated Layout.tsx (Attach Functionality to Buttons):

tsx
Copy code
{isGalleryPage && gallery && (
  <div className="flex items-center gap-4">
    {/* Tools Button */}
    <Button variant="outline" onClick={toggleSelectionMode}>
      {isSelectionMode ? 'Deselect' : 'Tools'}
    </Button>

    {/* Filters Dropdown */}
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline">
          Filters
          <ChevronDown className="ml-2 h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent>
        <DropdownMenuItem onClick={() => setFilter('starred')}>‚≠ê Starred</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setFilter('date')}>üìÖ Date</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setFilter('tag')}>üè∑Ô∏è Tags</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>

    {/* Share Button */}
    <Button variant="default" onClick={openShareModal}>
      <Share2 className="h-5 w-5 mr-2" />
      Share
    </Button>
  </div>
)}
3. Inline Title Editing for Gallery Pages
Replace the static gallery title with inline editing for gallery pages.
Allow editing directly from the global header.
Update Layout.tsx (Inline Edit for Title):

tsx
Copy code
import InlineEdit from '@/components/ui/InlineEdit';

return (
  <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b">
    <div className="px-6 md:px-8 lg:px-12 py-4 flex items-center gap-4">
      {isGalleryPage ? (
        <InlineEdit value={title} onSave={handleTitleUpdate} />
      ) : (
        <h1 className="text-xl font-semibold">{title}</h1>
      )}

      {/* Buttons for Gallery Pages */}
      {isGalleryPage && (
        <div className="flex items-center gap-4">
          {/* Tools, Filters, Share */}
        </div>
      )}

      <div className="ml-auto flex items-center gap-4">
        {actions}
        <Tooltip>
          <TooltipTrigger asChild>
            <Button variant="ghost" onClick={toggleDarkMode}>
              {isDarkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
            </Button>
          </TooltipTrigger>
          <TooltipContent>Toggle Dark Mode</TooltipContent>
        </Tooltip>
        <UserNav />
      </div>
    </div>
  </div>
);
4. Remove Duplicate Header from Gallery.tsx
Now that the global header handles gallery-specific features, remove the duplicate GalleryHeader from Gallery.tsx.
Gallery.tsx (Remove Header):

tsx
Copy code
{/* Remove this block */}
{/* 
<GalleryHeader 
  title={gallery?.title || 'Gallery'}
  onTitleUpdate={handleTitleUpdate}
  isDarkMode={isDarkMode}
  toggleDarkMode={toggleDarkMode}
  openShareModal={() => setIsOpenShareModal(true)}
/> 
*/}
