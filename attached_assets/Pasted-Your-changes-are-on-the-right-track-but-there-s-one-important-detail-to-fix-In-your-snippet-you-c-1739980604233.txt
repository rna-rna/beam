Your changes are on the right track, but there’s one important detail to fix. In your snippet, you call:

ts
Copy
img.src = publicUrl;

completeBatch(addBatchId, true);
queryClient.invalidateQueries([`/api/galleries/${slug}`]);
resolve();
immediately after setting img.src. That means the promise is resolved (and the batch marked as complete) without waiting for the image to actually load. This can cause the UI to keep using the temporary local URL even though the upload is “complete.”

What You Should Do
Move the completeBatch, invalidateQueries, and resolve calls into the img.onload callback.
This ensures that once the browser successfully loads the image from the public URL, you update the state and mark the upload as complete.

Remove the extra calls outside of img.onload.

Corrected Code Example
Replace your current code block with something like this:

ts
Copy
// Load the uploaded image to get final dimensions
const img = new Image();
img.onload = () => {
  // Once the image loads from the public URL, update its state:
  setImages((prev) =>
    prev.map((img) =>
      img.id === imageId
        ? {
            ...(img as PendingImage),
            status: "complete",
            progress: 100,
            // Remove the localUrl so that rendering uses the final URL
            localUrl: undefined,
            url: publicUrl,
          }
        : img,
    ),
  );
  completeBatch(addBatchId, true);
  queryClient.invalidateQueries([`/api/galleries/${slug}`]);
  resolve();
};
img.onerror = () => {
  // Optionally handle error if the image fails to load
  console.error("Error loading the final image:", publicUrl);
  completeBatch(addBatchId, false);
  reject(new Error("Failed to load final image"));
};
img.src = publicUrl;
Explanation
Waiting for the Image to Load:
By moving the calls into img.onload, you ensure that the promise is resolved only after the image has successfully loaded from the public URL.

Updating the State:
Setting localUrl: undefined makes the conditional in your render function fall back to using getR2Image(image, "thumb"). This displays the final image from R2 rather than the local blob URL.

Removing Duplicate Calls:
Removing the duplicate calls outside the callback prevents resolving the promise too early.