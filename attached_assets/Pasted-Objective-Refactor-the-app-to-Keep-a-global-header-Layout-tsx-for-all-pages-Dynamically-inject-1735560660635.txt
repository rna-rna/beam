Objective:
Refactor the app to:

Keep a global header (Layout.tsx) for all pages.
Dynamically inject gallery-specific features (Tools, Filters, Share) into the header only on gallery pages.
Remove GalleryHeader.tsx to prevent duplicate headers while ensuring all its functionality merges into the global header when viewing gallery pages.
1. Update Layout.tsx to Inject Gallery-Specific Features
Conditionally render Tools, Filters, and Share buttons in the global header based on the current route.
Steps:

Open Layout.tsx in Replit.
Modify the existing layout to detect gallery routes and dynamically insert gallery-centric features.
Layout.tsx (Updated to Include Gallery Features):

tsx
Copy code
import { useLocation } from 'wouter';
import { Button } from '@/components/ui';
import { ChevronDown, Share2, Sun, Moon } from 'lucide-react';
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from '@/components/ui';
import { UserNav } from './UserNav';

export function Layout({ children, title, actions, gallery, isDarkMode, toggleDarkMode, openShareModal, toggleSelectionMode, onFilterSelect }: LayoutProps) {
  const [location] = useLocation();
  const isGalleryPage = location.startsWith('/g/');

  return (
    <div className="min-h-screen w-full bg-background">
      {/* Global Header */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b">
        <div className="px-6 md:px-8 lg:px-12 py-4 flex items-center gap-4">
          {title ? (
            <h1 className="text-xl font-semibold">{title}</h1>
          ) : null}

          {/* Inject Gallery-Specific Features Conditionally */}
          {isGalleryPage && gallery && (
            <div className="flex items-center gap-4">
              {/* Tools Button */}
              <Button variant="outline" onClick={toggleSelectionMode}>
                Tools
              </Button>

              {/* Filters Dropdown */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline">
                    Filters
                    <ChevronDown className="ml-2 h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuItem onClick={() => onFilterSelect('starred')}>‚≠ê Starred</DropdownMenuItem>
                  <DropdownMenuItem onClick={() => onFilterSelect('date')}>üìÖ Date</DropdownMenuItem>
                  <DropdownMenuItem onClick={() => onFilterSelect('tag')}>üè∑Ô∏è Tags</DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>

              {/* Share Button */}
              <Button variant="default" onClick={openShareModal}>
                <Share2 className="h-5 w-5 mr-2" />
                Share
              </Button>
            </div>
          )}

          <div className="ml-auto flex items-center gap-4">
            {actions}
            
            {/* Dark Mode Toggle */}
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" onClick={toggleDarkMode}>
                  {isDarkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
                </Button>
              </TooltipTrigger>
              <TooltipContent>Toggle Dark Mode</TooltipContent>
            </Tooltip>
            
            {/* User Dropdown */}
            <UserNav />
          </div>
        </div>
      </div>

      <main className="relative">
        {children}
      </main>
    </div>
  );
}
2. Update App.tsx to Pass Gallery-Specific Props
Ensure App.tsx correctly passes gallery actions and props to Layout.tsx for gallery pages.
Steps:

Open App.tsx in Replit.
Ensure the gallery route (/g/:slug) passes necessary props to the layout, including gallery, toggleSelectionMode, and onFilterSelect.
App.tsx (Updated Gallery Route):

tsx
Copy code
<Route path="/g/:slug">
  {(params) => (
    <Layout
      title={gallery?.title || 'Loading Gallery...'}
      gallery={gallery}
      isDarkMode={isDarkMode}
      toggleDarkMode={toggleDarkMode}
      openShareModal={() => setIsOpenShareModal(true)}
      toggleSelectionMode={toggleSelectionMode}
      onFilterSelect={setFilter}
    >
      <Gallery slug={params.slug} />
    </Layout>
  )}
</Route>
3. Remove GalleryHeader.tsx to Prevent Duplication
Since gallery-specific actions are now injected into the global header, GalleryHeader.tsx is no longer needed.
Steps:

Delete or comment out GalleryHeader.tsx.
In Gallery.tsx, remove any imports or references to GalleryHeader.
Gallery.tsx (Simplified ‚Äì No Direct Header):

tsx
Copy code
return (
  <div className="relative bg-black/90">
    {/* Gallery Content */}
  </div>
);
