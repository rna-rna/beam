Implement Grid View Toggle for Gallery Page (Switch Between Masonry and Rigid Grid Layouts)
Goal:
Add a toggle switch in the bottom-left corner of the Gallery Page to switch between:

Masonry Grid (Existing) – Dynamic, waterfall-style layout.
Rigid Grid (Contact Sheet Style) – Uniform rows and columns for a more traditional look.
Breakpoints and column counts should remain consistent across both modes.
Responsive Behavior: The grid should adapt fluidly across different screen sizes.
Slider Support: The drag-to-reorder feature should function identically in both grid styles.
The toggle switch should visually depict the two grid types with greyed-out SVG icons.
Implementation Overview:
State Toggle: Manage the grid mode (masonry or rigid) via useState().
Conditional Rendering: Render either a Masonry or Flexbox/CSS Grid based on the state.
Transition Animation: Smooth fade-in when switching between grid styles to avoid jarring layout shifts.
Instructions for Replit (Implementation Plan):
1. State and Toggle Button Implementation (Bottom-Left Corner):
Add a state to track whether the gallery is in Masonry or Rigid Grid mode.

tsx
Copy code
const [isMasonry, setIsMasonry] = useState(true);

const toggleGridView = () => {
  setIsMasonry(!isMasonry);
};
Toggle Button (SVG View Switcher):
Place the toggle button in the bottom-left corner of the gallery, using fixed positioning for visibility.

tsx
Copy code
<div className="fixed bottom-6 left-6 z-50 flex items-center gap-2">
  <button
    onClick={toggleGridView}
    className="p-2 rounded-full bg-gray-200 hover:bg-gray-300 transition"
    aria-label="Toggle Grid View"
  >
    {isMasonry ? (
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
        {/* Masonry Grid Icon */}
        <rect x="4" y="4" width="6" height="6" fill="currentColor" />
        <rect x="14" y="4" width="6" height="10" fill="currentColor" />
        <rect x="4" y="14" width="6" height="6" fill="currentColor" />
        <rect x="14" y="16" width="6" height="4" fill="currentColor" />
      </svg>
    ) : (
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
        {/* Rigid Grid Icon */}
        <rect x="4" y="4" width="6" height="6" fill="currentColor" />
        <rect x="14" y="4" width="6" height="6" fill="currentColor" />
        <rect x="4" y="14" width="6" height="6" fill="currentColor" />
        <rect x="14" y="14" width="6" height="6" fill="currentColor" />
      </svg>
    )}
  </button>
</div>
2. Dynamic Grid Rendering (Conditional Layout):
Modify the gallery rendering to switch between Masonry and Rigid Grid based on the toggle state.

tsx
Copy code
<div className="relative">
  {isMasonry ? (
    // Masonry Layout
    <Masonry
      breakpointCols={breakpointCols}
      className="flex -ml-4 w-[calc(100%+1rem)]"
      columnClassName="pl-4 bg-background"
    >
      {gallery?.images.map((image: Image) => (
        <motion.div
          key={image.id}
          className="mb-4"
          layout
        >
          <img
            src={image.url}
            alt=""
            className="w-full h-auto object-cover rounded-lg"
          />
        </motion.div>
      ))}
    </Masonry>
  ) : (
    // Rigid Grid Layout
    <div className="grid gap-4"
      style={{
        gridTemplateColumns: `repeat(${breakpointCols.default}, minmax(0, 1fr))`,
      }}
    >
      {gallery?.images.map((image: Image) => (
        <motion.div
          key={image.id}
          layout
          className="relative"
        >
          <img
            src={image.url}
            alt=""
            className="w-full h-auto object-cover rounded-lg"
          />
        </motion.div>
      ))}
    </div>
  )}
</div>
3. CSS Grid Behavior for Rigid Layout (Contact Sheet Style):
Define a responsive gridTemplateColumns to match Masonry's breakpoints but behave like a rigid contact sheet.

tsx
Copy code
const breakpointCols = {
  default: 5,
  1100: 4,
  768: 3,
  500: 2,
};
The grid uses gridTemplateColumns to ensure uniform rows and columns at each breakpoint.
4. Smooth Transitions Between Grid Views (Framer Motion):
Add Framer Motion animations to handle the transition between masonry and rigid grid views seamlessly.

tsx
Copy code
<AnimatePresence mode="wait">
  <motion.div
    key={isMasonry ? "masonry" : "grid"}
    initial={{ opacity: 0, y: 10 }}
    animate={{ opacity: 1, y: 0 }}
    exit={{ opacity: 0, y: -10 }}
    transition={{ duration: 0.3 }}
  >
    {isMasonry ? (
      <Masonry {...masonryProps}>
        {/* Masonry images */}
      </Masonry>
    ) : (
      <div className="grid grid-cols-4 gap-4">
        {/* Rigid Grid images */}
      </div>
    )}
  </motion.div>
</AnimatePresence>
Slider Compatibility for Rigid Grid (Drag to Reorder):
Ensure that drag-to-reorder functionality still works in both layouts. Use the same motion.div for draggable images.

tsx
Copy code
<motion.div
  drag="y"
  dragConstraints={{ top: 0, bottom: 0 }}
  whileDrag={{ scale: 1.05 }}
  onDragEnd={(event, info) => handleDragEnd(event, index, info)}
>
  <img
    src={image.url}
    alt=""
    className="w-full h-auto object-cover rounded-lg"
  />
</motion.div>
