Fix: Handle the Lookup Result Gracefully
Modify the invite route to handle non-iterable or empty responses properly.

Update the Code:
ts
Copy code
const users = await clerkClient.users.getUserList({ emailAddress: [email] });
const user = Array.isArray(users) && users.length > 0 ? users[0] : null;

if (!user) {
  console.log(`User not found in Clerk for email: ${email}`);
}
Full Fix in Context (routes.ts):
ts
Copy code
protectedRouter.post('/galleries/:slug/invite', async (req, res) => {
  const { email, role } = req.body;
  const { slug } = req.params;
  const userId = req.auth.userId;

  try {
    console.log(`Invite attempt: slug=${slug}, email=${email}, role=${role}, by user=${userId}`);

    const gallery = await db.query.galleries.findFirst({
      where: eq(galleries.slug, slug),
    });

    if (!gallery || gallery.userId !== userId) {
      console.log('Unauthorized or gallery not found');
      return res.status(403).json({ message: 'Unauthorized' });
    }

    // Lookup user by email in Clerk
    const users = await clerkClient.users.getUserList({ emailAddress: [email] });
    const user = Array.isArray(users) && users.length > 0 ? users[0] : null;

    if (!user) {
      console.log(`User not found in Clerk for email: ${email}`);
    }

    // Check for existing invite
    const existingInvite = await db.query.invites.findFirst({
      where: and(eq(invites.galleryId, gallery.id), eq(invites.email, email)),
    });

    if (existingInvite) {
      console.log('Updating existing invite for:', email);
      await db.update(invites)
        .set({ role })
        .where(and(eq(invites.galleryId, gallery.id), eq(invites.email, email)));
    } else {
      console.log('Creating new invite for:', email);
      await db.insert(invites).values({
        galleryId: gallery.id,
        email,
        userId: user?.id || null,
        role
      });
    }

    res.json({ message: 'Invite sent successfully' });
  } catch (error) {
    console.error('Failed to invite user:', {
      error: error.message || error,
      stack: error.stack,
      email,
      slug
    });
    res.status(500).json({ 
      message: 'Failed to invite user',
      details: error.message || 'Unknown error'
    });
  }
});
