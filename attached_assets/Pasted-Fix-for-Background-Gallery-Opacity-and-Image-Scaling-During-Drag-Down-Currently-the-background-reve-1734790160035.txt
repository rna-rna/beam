Fix for Background Gallery Opacity and Image Scaling During Drag Down
Currently, the background reveal (revealOpacity) starts to fade in too quickly when swiping down, which makes the transition feel less smooth. Additionally, the image scale does not shrink dynamically enough to simulate the effect of returning to the gallery tile.

What We’ll Fix:
Slow Down the Background Reveal – The gallery background should remain darker for longer during the swipe-down action.
Dynamic Shrinking of Image on Drag – As the user swipes down, the image should gradually shrink, simulating the iPhone Photos app return-to-gallery effect.
Changes to Apply:
Adjust Background Opacity Reveal
Modify the revealOpacity to stay darker for a longer portion of the drag and only fade towards the end.
tsx
Copy code
const revealOpacity = useTransform(dragY, [-400, 0, 300], [0.2, 1, 0]);  // Stay darker for longer
Scale Image During Vertical Drag (Swipe Down to Exit)
Apply a scaling transform to the image, gradually reducing its size as the drag increases.
tsx
Copy code
const dragScale = useTransform(dragY, [0, 300], [1, 0.7]);  // Shrink to 70% when dragged down
Apply the Scaling Effect to the Active Image
Use the dragScale on the image component to smoothly shrink it.
tsx
Copy code
<motion.img
  src={image.url}
  alt=""
  className="w-full h-full object-contain select-none"
  draggable={false}
  style={{
    scale: dragScale,  // Apply dynamic scaling during drag
    x: offsetX,
    y: offsetY,
  }}
  drag={scaleValue.get() > 1}
  dragElastic={0.2}
  dragMomentum={false}
  transition={{
    type: "spring",
    stiffness: 200,
    damping: 20,
  }}
  onPan={handlePan}
/>
Enhancing the Swipe Down to Exit Experience:
As the user drags down, the image scales down and the gallery background gradually reveals.
This creates a smoother, more polished transition that mimics the iPhone gallery app behavior.
Full Code Update (Key Changes Highlighted):
tsx
Copy code
const revealOpacity = useTransform(dragY, [-400, 0, 300], [0.2, 1, 0]);  // Extended range for darker hold
const dragScale = useTransform(dragY, [0, 300], [1, 0.7]);  // Shrink to 70% of original size

<motion.div
  className="fixed inset-0 bg-black touch-none z-50 overflow-hidden"
  initial={{ opacity: 0 }}
  animate={{ opacity: 1 }}
  exit={{ opacity: 0 }}
  style={{ opacity: revealOpacity }}
>
  <motion.div
    className="absolute inset-0 w-full h-full"
    style={{
      scale,
      opacity,
    }}
    drag={scaleValue.get() === 1}
    dragElastic={0.1}
    dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}
    dragDirectionLock
    onDragStart={() => setIsDragging(true)}
    onDragEnd={handleDragEnd}
  >
    <div className="w-full h-full flex items-center justify-center">
      <AnimatePresence initial={false} mode="popLayout">
        {images.map((image, index) => {
          if (Math.abs(index - currentIndex) > 1) return null;
          const isActive = index === currentIndex;

          return (
            <motion.div
              key={image.id}
              className="absolute inset-0 w-full h-full flex items-center justify-center"
              style={{
                zIndex: isActive ? 15 : 10,
                pointerEvents: isActive ? 'auto' : 'none',
              }}
              initial={{
                x: index > currentIndex ? '100%' : '-100%',
                opacity: 1,
              }}
              animate={{
                x: isActive ? dragX.get() : index > currentIndex ? '100%' : '-100%',
                opacity: 1,
                transition: {
                  type: "spring",
                  stiffness: 300,
                  damping: 20,
                },
              }}
              exit={{
                x: index > currentIndex ? '105%' : '-105%',
                opacity: 1,
                transition: { duration: 0.12 },
              }}
            >
              <div className="relative w-full h-full px-4">
                <motion.img
                  src={image.url}
                  alt=""
                  className="w-full h-full object-contain select-none"
                  draggable={false}
                  style={{
                    scale: dragScale,  // Image shrinks during swipe down
                    x: offsetX,
                    y: offsetY,
                  }}
                  drag={scaleValue.get() > 1}
                  dragElastic={0.2}
                  dragMomentum={false}
                  transition={{
                    type: "spring",
                    stiffness: 200,
                    damping: 20,
                  }}
                  onPan={handlePan}
                />
              </div>
            </motion.div>
          );
        })}
      </AnimatePresence>
    </div>
  </motion.div>
</motion.div>
Why This Works:
Controlled Gallery Reveal – By keeping the background darker for longer, the focus remains on the image until the user commits to the swipe.
Natural Image Shrink – The scaling effect during drag mimics the visual behavior of the iPhone photo app, reinforcing the feel of the image returning to its tile.
Fluid Transitions – Combining dynamic scaling with opacity transforms results in a much smoother exit experience.
