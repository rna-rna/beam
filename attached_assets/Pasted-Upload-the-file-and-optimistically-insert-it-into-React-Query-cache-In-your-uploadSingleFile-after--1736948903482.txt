Upload the file and optimistically insert it into React Query cache
In your uploadSingleFile, after the file is successfully PUT to your storage (xhr.send(item.file)), do two main things:

Transform the local “pending” item into the “final” item in React Query
Optionally, re-fetch from the server to confirm final data
In code, something like:

tsx
Copy code
async function uploadSingleFile(item) {
  try {
    // 1. Make your “POST /api/galleries/:slug/images” request to get { signedUrl, publicUrl, imageId }
    // 2. Upload the actual file (PUT to signedUrl) using XMLHttpRequest
    // 3. On success, do your optimistic cache update:

    // ----- (A) Update the React Query cache for `/api/galleries/${slug}`:
    queryClient.setQueryData([`/api/galleries/${slug}`], (oldData: any) => {
      if (!oldData) return oldData;

      // We’ll produce a new array with the newly uploaded image
      // inserted optimistically. That way it’s not removed from the UI.
      const updatedImages = [...oldData.images];

      // 1) Find if we had a "pending" placeholder in oldData 
      // that matched item.id e.g. "pending-xxx"
      const pendingIndex = updatedImages.findIndex(
        (img: any) => img.id === item.id
      );

      // 2) If found, replace that “pending” object with the final server data:
      if (pendingIndex !== -1) {
        updatedImages[pendingIndex] = {
          id: imageId,                 // from the server
          url: publicUrl,             // final public URL
          originalFilename: item.file.name,
          width: item.width || 800,
          height: item.height || 600,
          userStarred: false,
          stars: [],
          commentCount: 0,
          uploadTimestamp: Date.now(),
        };
      } else {
        // If for some reason it wasn't in there, push it now:
        updatedImages.push({
          id: imageId,
          url: publicUrl,
          originalFilename: item.file.name,
          width: item.width || 800,
          height: item.height || 600,
          userStarred: false,
          stars: [],
          commentCount: 0,
          uploadTimestamp: Date.now(),
        });
      }

      return {
        ...oldData,
        images: updatedImages,
      };
    });

    // ----- (B) Remove it from your local `pendingUploads` array:
    setPendingUploads((prev) => prev.filter((x) => x.id !== item.id));

    // ----- (C) Optionally re-fetch from server to confirm we’re fully in sync:
    queryClient.invalidateQueries([`/api/galleries/${slug}`]);

  } catch (error) {
    // handle errors
  }
}
Why do we do this?
We keep the placeholder item in the UI from the moment the user drops the file until it’s uploaded.
Once the upload completes, we transform that placeholder into the “real” item in React Query’s gallery.images.
We do not remove it from the UI—rather, we convert it from _isPending: true to the final server data.
