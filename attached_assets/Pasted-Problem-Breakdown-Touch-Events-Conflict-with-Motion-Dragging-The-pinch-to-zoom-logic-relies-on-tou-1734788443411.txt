Problem Breakdown:
Touch Events Conflict with Motion Dragging:
The pinch-to-zoom logic relies on touchmove events. However, motion.div uses drag and onDrag handlers. These can conflict with native touch gestures, blocking proper pinch recognition.
Scaling Affects Entire Div Instead of Image:
The zoom applies to the parent motion.div, not directly to the image. This results in limited or no scaling effect.
Pinch Gesture Distance Miscalculation:
The pinch logic (touch1.pageX - touch2.pageX) calculates distance inconsistently across devices, causing unreliable zoom scaling.
Fix Instructions for Replit:
Move Scaling to Image Level:
Ensure the scaleValue affects the image directly (motion.img) rather than the outer container.
tsx
Copy code
<motion.img
  src={image.url}
  alt=""
  className="w-full h-full object-contain select-none"
  draggable={false}
  style={{
    scale: scaleValue,
    x: offsetX,
    y: offsetY
  }}
/>
Use GestureStart and GestureChange for Pinch (iOS-Friendly):
Some devices support gesturestart and gesturechange events, which directly detect pinch gestures.
tsx
Copy code
useEffect(() => {
  const handleGestureChange = (event: any) => {
    event.preventDefault();
    const scaleFactor = Math.min(Math.max(event.scale, 1), 3);
    scaleValue.set(scaleFactor);
  };

  window.addEventListener('gesturechange', handleGestureChange);

  return () => {
    window.removeEventListener('gesturechange', handleGestureChange);
  };
}, []);
Use onTouchMove for Pinch Detection (Fallback for Devices Without gesturechange):
Track the distance between two fingers during touchmove and adjust scaling dynamically.

tsx
Copy code
useEffect(() => {
  let startDistance = 0;

  const handleTouchStart = (event: TouchEvent) => {
    if (event.touches.length === 2) {
      const dx = event.touches[0].pageX - event.touches[1].pageX;
      const dy = event.touches[0].pageY - event.touches[1].pageY;
      startDistance = Math.sqrt(dx * dx + dy * dy);
    }
  };

  const handleTouchMove = (event: TouchEvent) => {
    if (event.touches.length === 2) {
      event.preventDefault();
      const dx = event.touches[0].pageX - event.touches[1].pageX;
      const dy = event.touches[0].pageY - event.touches[1].pageY;
      const newDistance = Math.sqrt(dx * dx + dy * dy);

      const scaleFactor = Math.min(Math.max(newDistance / startDistance, 1), 3);
      scaleValue.set(scaleFactor);
    }
  };

  window.addEventListener('touchstart', handleTouchStart);
  window.addEventListener('touchmove', handleTouchMove, { passive: false });

  return () => {
    window.removeEventListener('touchstart', handleTouchStart);
    window.removeEventListener('touchmove', handleTouchMove);
  };
}, []);
Clamp and Reset Zoom Smoothly (Double Tap to Reset):
Allow double-tap to reset the zoom and offset.
tsx
Copy code
const resetZoom = () => {
  scaleValue.set(1);
  offsetX.set(0);
  offsetY.set(0);
};

window.addEventListener('dblclick', resetZoom);
Allow Panning Only When Zoomed In:
Ensure panning (drag) is enabled only if the image is zoomed beyond 1x.

tsx
Copy code
drag={scaleValue.get() > 1}
