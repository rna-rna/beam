Objective for Replit: Fix Drag-and-Drop Reorder Flow on Gallery Page
Problem Statement:
The current drag-and-drop reorder functionality in the gallery page is not working as expected:

Dragging feels restrictive – Users can't freely drag images vertically or horizontally.
Premature Exit – As soon as users release the drag, the reorder mode exits back to Select Mode.
No Continuous Reordering – Users cannot keep reordering without repeatedly re-entering reorder mode.
Solution Overview:
Allow Unrestricted Dragging – Enable free movement within the grid, allowing images to shift positions dynamically.
Persistent Reorder Mode – Keep Reorder Mode active after drag ends, allowing users to reorder multiple images without interruption.
Visual Cues – Maintain drag handles and subtle scaling to signal the images are draggable.
Implementation Instructions for Replit:
1. Persist Reorder Mode After Dragging
Currently, setIsReorderMode(false) is triggered in the mutation’s onSuccess block, which causes Reorder Mode to exit immediately.

Fix: Remove setIsReorderMode(false) from the reorder mutation's onSuccess handler.

tsx
Copy code
const reorderImageMutation = useMutation({
  mutationFn: async (newOrder: number[]) => {
    const res = await fetch(`/api/galleries/${slug}/reorder`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ order: newOrder }),
    });
    if (!res.ok) throw new Error("Failed to reorder images");
    return res.json();
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: [`/api/galleries/${slug}`] });
    // Removed this to keep reorder mode active:
    // setIsReorderMode(false); 
    toast({
      title: "Success",
      description: "Image order updated successfully",
    });
  },
  onError: () => {
    toast({
      title: "Error",
      description: "Failed to update image order. Please try again.",
      variant: "destructive",
    });
  },
});
2. Fix Dragging Constraints and Enable Free Movement
Currently, the dragging is constrained by:

tsx
Copy code
dragConstraints={{ top: 0, bottom: 0 }}
Fix: Remove the constraints or set them dynamically to allow movement within the grid's height.

Update:

tsx
Copy code
<motion.div
  key={image.id}
  className={`mb-4 image-container`}
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  exit={{ opacity: 0 }}
  transition={{ duration: 0.4 }}
  drag={isReorderMode ? "y" : false}
  dragConstraints={false}  // No constraint
  onDragEnd={(_, info) => handleDragEnd(_, index, info)}
  whileDrag={{ scale: 1.05, zIndex: 50 }}
>
3. Adjust Drag End Logic for Proper Reordering
The current logic for calculating the new index after dragging can be unreliable, causing unpredictable reordering.

Fix: Use the exact drag offset to determine where the image should be dropped.

Updated handleDragEnd Function:

tsx
Copy code
const handleDragEnd = useCallback(
  (_: MouseEvent | TouchEvent | PointerEvent, draggedIndex: number, info: PanInfo) => {
    if (!gallery || !isReorderMode) return;

    const dragDistance = info.offset.y;
    const imageHeight = document.querySelector('.image-container')?.clientHeight || 100;
    
    const newIndex = Math.min(
      Math.max(0, draggedIndex + Math.round(dragDistance / imageHeight)),
      gallery.images.length - 1
    );

    if (newIndex !== draggedIndex) {
      const updatedImages = [...gallery.images];
      const [movedImage] = updatedImages.splice(draggedIndex, 1);
      updatedImages.splice(newIndex, 0, movedImage);

      // Update state immediately to reflect changes
      queryClient.setQueryData([`/api/galleries/${slug}`], {
        ...gallery,
        images: updatedImages,
      });

      // Send reordering request to the server
      reorderImageMutation.mutate(updatedImages.map(img => img.id));
    }
  },
  [gallery, isReorderMode, queryClient, reorderImageMutation, slug]
);
4. Add Visual Feedback to Indicate Reordering
To make it clear to users that reordering is in progress:

Apply drag handles to the images during Reorder Mode.
Scale up the image slightly during dragging.
Drag Handle Implementation:

tsx
Copy code
{isReorderMode && (
  <div className="absolute top-2 left-2 z-10 cursor-grab active:cursor-grabbing">
    <svg width="18" height="18" fill="gray">
      <rect x="4" y="4" width="3" height="3" />
      <rect x="4" y="11" width="3" height="3" />
    </svg>
  </div>
)}
5. Prevent Reordering from Triggering Gallery Exit
Currently, if users click outside the image grid during reorder mode, it may exit.

Fix: Prevent propagation during drag to avoid accidental mode exit.

tsx
Copy code
onClick={(e) => {
  if (isReorderMode) {
    e.stopPropagation();
  } else {
    handleImageClick(index);
  }
}}
