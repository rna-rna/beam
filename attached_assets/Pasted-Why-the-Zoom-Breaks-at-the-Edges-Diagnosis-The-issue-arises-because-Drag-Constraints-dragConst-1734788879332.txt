Why the Zoom Breaks at the Edges (Diagnosis):
The issue arises because:

Drag Constraints (dragConstraints) are applied directly to the image, limiting how far the image can pan.
Incorrect Offset Management – The offset (offsetX, offsetY) adds up continuously without checking if the image has hit its maximum draggable bounds.
Scale vs. Drag Conflict – When zoomed in (scaleValue > 1), dragging the image to the edges causes it to "snap back" inconsistently. This results in erratic behavior, especially when dragging quickly.
Fixing the Panning Issue at Edges:
Approach:

Dynamically Clamp Offset Based on Scale:
Calculate the maximum allowable drag based on the current zoom level (scaleValue) and the image's dimensions.

Restrict Dragging at Edges Without Snapping Back:
Prevent the image from being dragged beyond its natural zoom boundaries by dynamically updating drag constraints during pinch or pan.

Code Fix (Dynamic Boundary Panning):
tsx
Copy code
const clampPan = (value: number, maxDistance: number) => {
  return Math.max(Math.min(value, maxDistance), -maxDistance);
};

const handlePan = (event: any, info: PanInfo) => {
  const scale = scaleValue.get();
  const maxX = (window.innerWidth / 2) * (scale - 1);
  const maxY = (window.innerHeight / 2) * (scale - 1);

  offsetX.set(clampPan(offsetX.get() + info.delta.x, maxX));
  offsetY.set(clampPan(offsetY.get() + info.delta.y, maxY));
};
Apply to Image Panning:
tsx
Copy code
<motion.img
  src={image.url}
  alt=""
  className="w-full h-full object-contain select-none"
  draggable={false}
  style={{
    scale: scaleValue,
    x: offsetX,
    y: offsetY,
  }}
  drag={scaleValue.get() > 1}
  dragElastic={0.2}
  dragMomentum={false}  // Prevent overshoot momentum
  onDrag={handlePan}
  dragConstraints={{
    left: 0,  // Allow unrestricted movement based on dynamic clamping
    right: 0,
    top: 0,
    bottom: 0,
  }}
  transition={{
    type: "spring",
    stiffness: 300,
    damping: 15,
    mass: 0.3,
  }}
/>
How This Fix Works:
Dynamic Pan Limits – The clampPan function restricts panning to the image’s zoom level, preventing over-panning that causes the snap-back issue.
Scale-Aware Offsets – As the image scales up, the drag limits adjust dynamically, allowing panning to extend based on zoom but not beyond the image boundaries.
Smooth Panning at Edges – The image softly bounces at edges without flickering or breaking the layout.
Additional Improvements (Optional):
Bounce-Back Effect – If the user drags the image past its max offset, implement a spring return to keep the image comfortably within view.
tsx
Copy code
if (Math.abs(offsetX.get()) > maxX || Math.abs(offsetY.get()) > maxY) {
  offsetX.set(clampPan(offsetX.get(), maxX));
  offsetY.set(clampPan(offsetY.get(), maxY));
}
Momentum Dragging – Reintroduce momentum-based dragging (dragMomentum: true) once the boundaries are stable to allow smooth pan inertia.
