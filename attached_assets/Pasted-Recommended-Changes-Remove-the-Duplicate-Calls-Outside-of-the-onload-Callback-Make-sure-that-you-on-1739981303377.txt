Recommended Changes
Remove the Duplicate Calls Outside of the onload Callback:
Make sure that you only mark the upload as complete, invalidate the cache, and resolve the promise once the image has successfully loaded.

Handle Cached Images:
If the image is already cached (and thus img.complete is true immediately), call the onload handler manually.

Ensure Your Render Logic Uses a Truthy Check:
In your render function, use:

tsx
Copy
src={image.localUrl ? image.localUrl : getR2Image(image, "thumb")}
rather than checking for the property’s existence.

Updated Code Example
Try replacing your upload completion block with something like this:

tsx
Copy
// Load the uploaded image to get final dimensions
const img = new Image();
img.onload = () => {
  // Update the image state: remove the local URL and set the public URL
  setImages((prev) =>
    prev.map((item) =>
      item.id === imageId
        ? {
            ...(item as PendingImage),
            status: "complete",
            progress: 100,
            localUrl: undefined, // Remove temporary blob URL
            url: publicUrl,      // Use final public URL
          }
        : item,
    ),
  );
  completeBatch(addBatchId, true);
  queryClient.invalidateQueries([`/api/galleries/${slug}`]);
  resolve();
};
img.onerror = () => {
  console.error("Error loading final image:", publicUrl);
  completeBatch(addBatchId, false);
  reject(new Error("Failed to load final image"));
};

// Set the source AFTER attaching the onload and onerror callbacks
img.src = publicUrl;

// If the image is already cached, trigger onload immediately
if (img.complete) {
  img.onload();
}
What This Does
Waits for the Image to Load:
The promise isn’t resolved until the image is fully loaded from the public URL. This ensures that the state update (removing the blob URL) happens before the component re-renders.

Removes the Blob URL:
Setting localUrl: undefined means that the render logic (which now uses image.localUrl ? image.localUrl : getR2Image(image, "thumb")) will fall back to calling your getR2Image function. That function will use image.url (which you just updated) to build the correct public URL.

Handles Cached Images:
If the image is already loaded (due to caching), the code calls img.onload() immediately so that the state update happens even if the event wasn’t triggered asynchronously.