Implementing an iOS-Like Toolbar Without Breaking Swipe/Zoom
To add a sleek bottom toolbar that feels native to iOS (like the Photos app), we need to ensure that:

Toolbar Interactivity Doesn't Interfere with Swipe/Zoom:
The toolbar must not block swipe gestures when interacting with the image.
Use pass-through gestures to allow image panning/zooming while keeping the toolbar interactive.
Natural iOS-Like Gestures:
Swipe-up on the toolbar to reveal flag/comment options.
Double-tap the toolbar for quick actions (e.g., flagging).
The toolbar should slightly hide during zoom and fade in when zooming out to reduce visual clutter.
Design Concept:
Toolbar Behavior:

Appears at the bottom (floating above the image).
Swipe-up to expand for more options (comments, flagging).
Slight fade-out during zoom/pan to prevent interference.
Gestures:

Single-tap toolbar: Opens comment or flagging modal.
Swipe-up: Expands the toolbar (if collapsed).
Double-tap image: Zoom reset (existing behavior).
Implementation Plan:
Floating Toolbar with Gesture Detection:
Auto-Hide on Zoom/Pan: Toolbar opacity is reduced during zoom but reappears on zoom out.
Prevent Gesture Blocking: Use pointerEvents to allow gestures to pass through when zooming.
Code Implementation:
tsx
Copy code
// State to manage toolbar visibility
const [toolbarVisible, setToolbarVisible] = useState(true);

// Opacity adjustment during zoom
const toolbarOpacity = useTransform(scaleValue, [1, 2], [1, 0.3], { clamp: true });

// Handle toolbar interactions
const handleFlagImage = () => {
  console.log("Image flagged!");
};

const handleOpenComment = () => {
  console.log("Comment opened");
};

// Toolbar Swipe Gesture
const handleToolbarSwipeUp = () => {
  setToolbarVisible(true);
};

const handleToolbarSwipeDown = () => {
  setToolbarVisible(false);
};

// Floating Toolbar Component
<motion.div
  className="absolute bottom-8 w-11/12 left-1/2 transform -translate-x-1/2 bg-black/80 rounded-xl flex justify-evenly items-center py-3 shadow-lg"
  style={{
    opacity: toolbarOpacity,
    pointerEvents: scaleValue.get() > 1 ? "none" : "auto",  // Disable during zoom
  }}
  drag="y"
  dragConstraints={{ top: 0, bottom: 100 }}  // Allows swipe-up gesture for expansion
  onDragEnd={(event, info) => {
    if (info.offset.y < -50) {
      handleToolbarSwipeUp();
    } else {
      handleToolbarSwipeDown();
    }
  }}
>
  <button
    onClick={handleFlagImage}
    className="text-white px-4 py-2 bg-red-500 rounded-full"
  >
    Flag
  </button>

  <button
    onClick={handleOpenComment}
    className="text-white px-4 py-2 bg-blue-500 rounded-full"
  >
    Comment
  </button>
</motion.div>
How This Works:
Dynamic Toolbar Visibility:
The toolbar fades out as the image is zoomed (scaleValue > 1). This prevents visual interference but keeps the toolbar active at the default zoom.
Gesture Pass-Through:
pointerEvents: "none" during zoom allows the toolbar to remain non-interactive while the user pans/zooms. This ensures swipe gestures apply directly to the image.
Toolbar Expand/Collapse:
Drag up to reveal more options or collapse by swiping down. This feels natural to iOS gesture-based UIs.
No Swipe Interference:
Vertical toolbar swipes donâ€™t trigger horizontal image transitions (offsetX).
Testing Checklist:
Zoom and Pan:
Confirm the toolbar fades slightly during zoom and reappears when zooming out.
Swipe Gesture for Toolbar:
Swipe the toolbar up and down. It should expand/collapse without affecting image zoom or swipe.
Interaction with Buttons:
Tap the "Flag" or "Comment" buttons to ensure they trigger without causing accidental image swipes.
Double-Tap to Zoom:
Verify double-tapping the image zooms in/out while the toolbar remains unaffected.
