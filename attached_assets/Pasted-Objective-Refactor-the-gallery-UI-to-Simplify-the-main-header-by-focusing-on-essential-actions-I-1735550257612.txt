Objective:
Refactor the gallery UI to:

Simplify the main header by focusing on essential actions.
Introduce a floating tools toolbar that appears at the bottom center when the Tools button is clicked.
Leverage existing state logic to handle selection mode and bulk actions (Edit, Delete, Download).
1. Refactor the Main Header (Simplified Layout):
Open Gallery.tsx in Replit.
Locate the existing header section.
Replace the current structure with the following streamlined version, ensuring core actions (Filters, Share, Dark Mode, UserNav/Login) are present.
Code for Simplified Header (Top Toolbar):

tsx
Copy code
<div className="sticky top-0 z-50 bg-white shadow flex items-center justify-between px-6 py-4">
  <div className="flex items-center gap-6">
    <h1 className="text-2xl font-bold">{gallery?.title || 'Gallery'}</h1>

    {/* Tools Button to Activate Selection Mode */}
    <Button variant="outline" onClick={toggleSelectionMode}>
      Tools
    </Button>

    {/* Filters Dropdown */}
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline">
          Filters
          <ChevronDown className="ml-2 h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent>
        <DropdownMenuItem onClick={() => setFilter('starred')}>‚≠ê Starred</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setFilter('date')}>üìÖ Date</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setFilter('tag')}>üè∑Ô∏è Tags</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  </div>

  <div className="flex items-center gap-6">
    {/* Dark Mode Toggle */}
    <Tooltip>
      <TooltipTrigger asChild>
        <Button variant="ghost" onClick={toggleDarkMode}>
          {isDarkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
        </Button>
      </TooltipTrigger>
      <TooltipContent>Toggle Dark Mode</TooltipContent>
    </Tooltip>

    {/* Share Button */}
    <Button variant="default" onClick={openShareModal}>
      <Share2 className="h-5 w-5 mr-2" />
      Share
    </Button>

    {/* User Dropdown / Login */}
    {user ? (
      <UserNav user={user} />
    ) : (
      <div className="flex gap-4">
        <Button variant="outline" onClick={() => navigate('/login')}>Log In</Button>
        <Button onClick={() => navigate('/signup')}>Sign Up</Button>
      </div>
    )}
  </div>
</div>
2. Implement the Floating Tools Toolbar (Bottom Center):
The floating toolbar uses existing selection state (e.g., isSelectionMode and selectedItems).
This toolbar activates when the Tools button is clicked, allowing bulk actions on selected items.
Code for Floating Tools Toolbar:

tsx
Copy code
{isSelectionMode && (
  <div className="fixed bottom-8 left-1/2 transform -translate-x-1/2 z-50 bg-white shadow-lg rounded-lg p-4 flex items-center gap-6">
    <span>{selectedItems.length} Selected</span>
    <div className="flex gap-4">
      <Button variant="outline" onClick={editSelected}>
        ‚úèÔ∏è Edit
      </Button>
      <Button variant="destructive" onClick={deleteSelected}>
        üóëÔ∏è Delete
      </Button>
      <Button variant="default" onClick={downloadSelected}>
        ‚¨áÔ∏è Download
      </Button>
      <Button variant="secondary" onClick={deselectAll}>
        Deselect
      </Button>
    </div>
  </div>
)}
3. Leverage Existing State Management (No New State Required):
Since state for selection mode and bulk actions already exists, ensure the following logic integrates with existing functions:
Ensure the Following Functions Exist in Gallery.tsx:

tsx
Copy code
const toggleSelectionMode = () => {
  setIsSelectionMode(!isSelectionMode);
  if (!isSelectionMode) {
    setSelectedItems([]); // Reset selection
  }
};

const deselectAll = () => {
  setSelectedItems([]);
  setIsSelectionMode(false);
};
4. Update Photo Selection (Optional Enhancements):
Ensure photos display a checkbox or selection overlay when isSelectionMode is active.
This ensures bulk actions trigger correctly when photos are selected.
Example (Enable Selection on Photos):

tsx
Copy code
<div className="relative" onClick={() => toggleItemSelection(item.id)}>
  {isSelectionMode && (
    <input
      type="checkbox"
      checked={selectedItems.includes(item.id)}
      className="absolute top-2 left-2"
    />
  )}
  <img src={item.url} alt={item.name} className="rounded-lg shadow" />
</div>
