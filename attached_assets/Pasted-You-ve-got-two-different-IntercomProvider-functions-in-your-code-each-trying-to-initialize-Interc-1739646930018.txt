You’ve got two different “IntercomProvider” functions in your code, each trying to initialize Intercom in different ways. That can cause conflicts or overwrites, especially since one calls Intercom('boot', { ... }) and the other calls just Intercom({ ... }). It looks like the first IntercomProvider (in intercomprovider.tsx) sets up the name, email, etc. fields correctly, but the second one (in app.tsx) doesn’t. Also, Intercom typically needs Intercom('boot', ...) to set user details.

Key Issues
Two “IntercomProvider” Definitions

The first is in intercomprovider.tsx (with Intercom('boot', { ... }))
The second is at the bottom of app.tsx (with Intercom({ ... }) but no 'boot')
One will override or interfere with the other. You should keep just one Intercom initialization.
Avatar Setup

Intercom expects an avatar object with type: 'avatar' and an image_url for the user’s image to appear in the chat.
Putting the user’s image in custom_attributes.image_url won’t automatically show as their avatar.
Name Not Set

If user.firstName and user.lastName are empty in Clerk, your name field might end up empty or “Anonymous.” You need to confirm that your Clerk user actually has those values (or use something like user.fullName or user.primaryEmailAddress?.emailAddress as a fallback).
How to Fix
Merge to a Single Intercom Provider
In your entire app, only call Intercom('boot', ...) in one place (e.g., your dedicated IntercomProvider.tsx). Remove or rename the conflicting provider in app.tsx.

Pass Proper Avatar
To display the user’s photo in Intercom’s chat, pass it in the top-level config (not custom attributes) under avatar: { type: 'avatar', image_url: ... }.

Use Real Fallbacks for name
If you rely on firstName / lastName, ensure your Clerk sign-up flow requires them, or fallback to user.username or user.primaryEmailAddress?.emailAddress.

Below is a unified example Intercom provider, which you can place in intercomprovider.tsx and call exactly once in your app (usually in _app.tsx or your root component):

tsx
Copy
Edit
import { useEffect } from 'react';
import { useUser } from '@clerk/clerk-react';
import Intercom from '@intercom/messenger-js-sdk';

export function IntercomProvider() {
  const { user, isSignedIn } = useUser();

  useEffect(() => {
    // Shutdown Intercom on unmount to avoid collisions
    return () => {
      if (window.Intercom) {
        window.Intercom('shutdown');
      }
    };
  }, []);

  useEffect(() => {
    if (isSignedIn && user) {
      // Construct a name, falling back to username or email if first/last are empty
      const displayName = user.firstName || user.lastName
        ? `${user.firstName || ''} ${user.lastName || ''}`.trim()
        : user.username || user.primaryEmailAddress?.emailAddress || 'Anonymous';

      Intercom('boot', {
        app_id: 'nddy1kg6',
        user_id: user.id,
        name: displayName,
        email: user.primaryEmailAddress?.emailAddress ?? '',
        created_at: Math.floor(new Date(user.createdAt).getTime() / 1000),
        avatar: {
          type: 'avatar',
          image_url: user.imageUrl || '' // This sets the Intercom user avatar
        },
        // You can still pass any custom attributes as well
        custom_attributes: {
          last_sign_in: Math.floor(new Date(user.lastSignInAt || user.createdAt).getTime() / 1000),
          email_verified: user.primaryEmailAddress?.verification?.status === 'verified'
        }
      });
    } else {
      // Boot Intercom for anonymous visitors (not signed in)
      Intercom('boot', {
        app_id: 'nddy1kg6'
      });
    }
  }, [isSignedIn, user]);

  return null;
}
Then in your root App or layout file, import this provider once:

tsx
Copy
Edit
import { IntercomProvider } from './intercomprovider';

function App() {
  // ...
  return (
    <>
      {/* other providers, layout, etc. */}
      <IntercomProvider />
    </>
  );
}

export default App;
Final Tips
Remove the second IntercomProvider function in app.tsx entirely (the one that uses Intercom({ app_id: '...' }) with no 'boot').
Double-check that you only call Intercom('boot', ...) once.
Make sure your Clerk user objects actually have firstName / lastName or fallback to email to see the correct name.
Confirm the avatar is passed at the top level (not just in custom_attributes) so that Intercom knows to display the user’s image.
Make sure you’re loading the Intercom script snippet or using the official Intercom React snippet so that window.Intercom is available before calling Intercom('boot', ...).