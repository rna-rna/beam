Edit Your uploadSingleFile (or Equivalent) in Replit
Here’s an example of the key changes:

ts
Copy code
async function uploadSingleFile(item: {
  id: string;
  file: File;
  localUrl: string;
  status: "uploading" | "done" | "error";
  progress: number;
}) {
  console.log("[Client] Starting uploadSingleFile:", {
    fileName: item.file.name,
    fileSize: item.file.size,
    localUrl: item.localUrl,
  });

  // 1) addBatch to track progress
  addBatch(item.id, item.file.size, 1);

  try {
    // 2) Get presigned URLs from server
    const token = await getToken(); 
    const response = await fetch(`/api/galleries/${slug}/images`, {
      // ...
    });
    const data = await response.json();
    const { signedUrl, publicUrl, imageId } = data.urls[0];

    // 3) PUT the file to the signed URL
    await new Promise<void>((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.upload.onprogress = (ev) => {
        if (ev.lengthComputable) {
          const fraction = ev.loaded / ev.total;
          // update progress
        }
      };
      xhr.open("PUT", signedUrl, true);
      xhr.setRequestHeader("Content-Type", item.file.type);
      xhr.onload = () => (xhr.status === 200 ? resolve() : reject());
      xhr.onerror = () => reject(new Error("Network error"));
      xhr.send(item.file);
    });

    // [FIX] 4) Wait/poll. For simplicity, do a short delay:
    await new Promise<void>((resolve) => setTimeout(resolve, 1500));

    // Or do a quick HEAD fetch:
    // let cdnReady = false;
    // while (!cdnReady) {
    //   await new Promise((r) => setTimeout(r, 500));
    //   const headResp = await fetch(publicUrl, { method: "HEAD" });
    //   if (headResp.ok) cdnReady = true;
    // }

    // 5) Update React Query Cache
    queryClient.setQueryData([`/api/galleries/${slug}`], (oldData: any) => {
      if (!oldData) return oldData;
      const updatedImages = [...oldData.images];
      const pendingIndex = updatedImages.findIndex(
        (img: any) => img.id === `pending-${item.id}`
      );
      if (pendingIndex !== -1) {
        updatedImages[pendingIndex] = {
          ...updatedImages[pendingIndex],
          id: imageId,
          url: publicUrl,
          _isPending: false,
          _status: "done",
          _progress: 100,
          // ...
        };
      }
      return { ...oldData, images: updatedImages };
    });

    // 6) Mark state as done & remove from pending
    setPendingUploads((prev) =>
      prev.map((upload) =>
        upload.id === item.id
          ? { ...upload, status: "done", _status: "done", progress: 100 }
          : upload
      )
    );
    setTimeout(() => {
      setPendingUploads((prev) => prev.filter((u) => u.id !== item.id));
      // Revoke localUrl after removing from array
      URL.revokeObjectURL(item.localUrl);
    }, 800);
  } catch (error) {
    console.error("uploadSingleFile error:", error);
    // handle error
  }
}
Summary of changes in Replit:

Add a short setTimeout or polling loop after you PUT to the signed URL, so the final publicUrl is stable and loaded by the CDN before you update the <img>’s src.
Remove the old item from your local pendingUploads after 500–800 ms (or once you confirm it’s all good).