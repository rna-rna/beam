Understanding the Problem
In React, hooks must:

Be called in the same order on every render.
Not be called conditionally inside if statements or similar.
From your code, this is likely caused by conditional rendering logic like currentFolder or useQuery. If the folders or galleries queries are skipped under certain conditions, the hook order may break.

Solution: Ensure Hook Consistency
Always Initialize Hooks:

Ensure hooks like useQuery are always initialized, even if their data is not used.
Guard Conditional Logic with Data:

Use conditional logic after hooks, not around them.
Refactored Code
Hereâ€™s a fixed version of your component:

tsx
Copy
Edit
import React, { useState } from "react";
import { useQuery } from "@tanstack/react-query";

export const MainContentV2 = () => {
  const [currentFolder, setCurrentFolder] = useState<string | null>(null);

  // Always initialize hooks, even if data isn't displayed immediately
  const { data: galleries = [], isLoading: galleriesLoading } = useQuery({
    queryKey: ["/api/galleries"],
    queryFn: async () => {
      const res = await fetch("/api/galleries");
      if (!res.ok) throw new Error("Failed to fetch galleries");
      return res.json();
    },
  });

  const { data: folders = [], isLoading: foldersLoading } = useQuery({
    queryKey: ["/api/folders"],
    queryFn: async () => {
      const res = await fetch("/api/folders");
      if (!res.ok) throw new Error("Failed to fetch folders");
      return res.json();
    },
  });

  // Filter galleries based on the selected folder
  const displayedGalleries = currentFolder
    ? galleries.filter((gallery) => gallery.folderId === currentFolder)
    : galleries;

  // Handle folder click
  const handleFolderClick = (folderId: string | null) => {
    setCurrentFolder(folderId);
  };

  if (galleriesLoading || foldersLoading) {
    return <div>Loading...</div>; // Keep a consistent return early
  }

  return (
    <div className="flex h-full">
      {/* Sidebar */}
      <div className="w-64 bg-white border-r">
        <div className="p-4">
          <button
            onClick={() => handleFolderClick(null)} // Reset to show all galleries
            className="w-full text-left text-blue-600"
          >
            Recents
          </button>
        </div>
        <ul className="p-4 space-y-2">
          {folders.map((folder) => (
            <li
              key={folder.id}
              className="cursor-pointer px-4 py-2 bg-gray-100 rounded"
              onClick={() => handleFolderClick(folder.id)} // Open the selected folder
            >
              {folder.name}
            </li>
          ))}
        </ul>
      </div>

      {/* Main Content */}
      <div className="flex-1 px-6 py-8">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {displayedGalleries.length > 0 ? (
            displayedGalleries.map((gallery) => (
              <div key={gallery.id} className="bg-white shadow-md rounded-lg">
                <h3>{gallery.title}</h3>
              </div>
            ))
          ) : (
            <p>No galleries in this folder.</p>
          )}
        </div>
      </div>
    </div>
  );
};
Key Fixes in the Refactor
Always Initialize Hooks:

Both useQuery calls (galleries and folders) are always initialized, even if no folder is selected.
Avoid Early Returns with Conditional Hooks:

The conditional logic to filter galleries (currentFolder) happens after the hooks.
Consistent Early Return:

Loading... is returned only when both galleries and folders are loading.
Conditional Logic After Hooks:

Filtering of galleries (currentFolder) is handled within the render logic, not around hooks.