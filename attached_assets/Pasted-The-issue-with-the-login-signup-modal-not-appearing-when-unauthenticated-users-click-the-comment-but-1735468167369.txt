The issue with the login/signup modal not appearing when unauthenticated users click the comment button seems to stem from how the code currently handles unauthorized users.

Current Behavior Breakdown (CommentBubble.tsx):
When the commentMutation is triggered, if the user is not authenticated (!user):
tsx
Copy code
if (!user) {
   throw new Error('Please sign in to add comments');
}
This immediately throws an error and displays a toast message:
tsx
Copy code
toast({
  title: "Please sign in to comment",
  variant: "destructive",
  duration: 2000
});
Problem: This logic stops at the toast message but does not open a modal to guide the user to log in.
Solution – Trigger Modal for Unauthenticated Users:
Add State for Modal Control:
In CommentBubble.tsx, introduce a new state to control the visibility of the login modal:

tsx
Copy code
const [showAuthModal, setShowAuthModal] = useState(false);
Open Modal on Unauthorized Clicks:
Modify the handleSubmit function to open the login/signup modal when the user is not authenticated:

tsx
Copy code
const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  if (!user) {
    setShowAuthModal(true);  // Show modal instead of just a toast
    return;
  }

  if (text.trim()) {
    await commentMutation.mutateAsync(text);
  }
};
Render the Login Modal (Conditional Rendering):
Use Clerk’s SignIn component to trigger a modal when showAuthModal is true:

tsx
Copy code
return (
  <div
    className="absolute"
    style={{
      left: `${x}%`,
      top: `${y}%`,
      transform: 'translate(-50%, -50%)'
    }}
  >
    <div className="relative">
      <div className="w-6 h-6 rounded-full bg-primary flex items-center justify-center text-primary-foreground">
        <MessageCircle className="w-4 h-4" />
      </div>

      <Card className={`absolute left-8 top-0 -translate-y-1/2 w-max max-w-[300px] ${isEditing ? 'p-2' : 'p-3'} bg-card shadow-lg border-primary/20`}>
        {isEditing ? (
          <form onSubmit={handleSubmit} className="flex flex-col gap-2">
            <Input
              type="text"
              value={text}
              onChange={(e) => setText(e.target.value)}
              className="min-w-[200px] h-8"
              placeholder={user ? "Add comment..." : "Please sign in to comment"}
              disabled={!user || commentMutation.isPending}
              data-comment-input
              autoFocus
            />
          </form>
        ) : (
          <div>
            {author && (
              <div className="flex items-center gap-2 mb-2">
                <UserAvatar 
                  name={author}
                  className="w-6 h-6 text-xs" 
                />
                <p className="text-xs font-medium text-muted-foreground">
                  {author}
                </p>
              </div>
            )}
            <p className="text-sm text-foreground whitespace-pre-wrap">{content}</p>
          </div>
        )}
      </Card>
    </div>

    {showAuthModal && (
      <Dialog open={showAuthModal} onOpenChange={setShowAuthModal}>
        <DialogContent className="max-w-md">
          <h2 className="text-xl font-semibold mb-4">Sign In to Comment</h2>
          <SignIn afterSignInUrl={window.location.href} />
        </DialogContent>
      </Dialog>
    )}
  </div>
);
