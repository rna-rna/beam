1. Fix File Count
The file count is incorrectly displayed as activeUploads.length. Instead, pass the actual number of files being uploaded to UploadContext and display that value in GlobalUploadProgress.

Update UploadContext.tsx:
Add a fileCount property to track the number of files.

tsx
Copy code
interface UploadContextType {
  isUploading: boolean;
  uploadProgress: number;
  activeUploads: string[];
  totalSize: number;
  uploadedBytes: number;
  fileCount: number; // New property
  startUpload: (uploadId: string, totalSize: number, fileCount: number) => void;
  updateProgress: (uploadedBytes: number) => void;
  completeUpload: (uploadId: string) => void;
}

export function UploadProvider({ children }: { children: React.ReactNode }) {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [totalSize, setTotalSize] = useState(0);
  const [uploadedBytes, setUploadedBytes] = useState(0);
  const [activeUploads, setActiveUploads] = useState<string[]>([]);
  const [fileCount, setFileCount] = useState(0); // Track file count

  const startUpload = (uploadId: string, totalSize: number, fileCount: number) => {
    setActiveUploads([uploadId]);
    setTotalSize(totalSize);
    setUploadedBytes(0);
    setFileCount(fileCount); // Set the file count
    setIsUploading(true);
  };

  const completeUpload = (uploadId: string) => {
    setActiveUploads((prev) => prev.filter((id) => id !== uploadId));
    if (activeUploads.length <= 1) {
      setIsUploading(false);
      setUploadProgress(0);
      setUploadedBytes(0);
      setTotalSize(0);
      setFileCount(0); // Reset file count
    }
  };

  return (
    <UploadContext.Provider
      value={{
        isUploading,
        uploadProgress,
        activeUploads,
        totalSize,
        uploadedBytes,
        fileCount, // Provide file count
        startUpload,
        updateProgress,
        completeUpload,
      }}
    >
      {children}
    </UploadContext.Provider>
  );
}