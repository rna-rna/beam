import { useState } from "react";
import { AnimatePresence } from "framer-motion";
import { FloatingToolbar } from "@/components/FloatingToolbar";

export default function Gallery({ gallery }: { gallery: any }) {
  const [selectedImages, setSelectedImages] = useState<number[]>([]);
  const [selectMode, setSelectMode] = useState(false);

  const toggleSelectMode = () => {
    if (selectMode) {
      setSelectedImages([]);
    }
    setSelectMode(!selectMode);
  };

  const handleDeleteSelected = () => {
    deleteImagesMutation.mutate(selectedImages);
    setSelectedImages([]);
    setSelectMode(false);
  };

  const handleDownloadSelected = () => {
    console.log("Downloading selected items:", selectedImages);
  };

  const handleEditSelected = () => {
    console.log("Editing selected items:", selectedImages);
  };

  const handleImageSelect = (imageId: number) => {
    setSelectedImages((prev) =>
      prev.includes(imageId)
        ? prev.filter((id) => id !== imageId)
        : [...prev, imageId]
    );
  };

  return (
    <div className="relative bg-black/90 min-h-screen">
      <div className="grid grid-cols-3 gap-4 p-6">
        {gallery?.images.map((image: any) => (
          <div
            key={image.id}
            className={`relative cursor-pointer ${
              selectedImages.includes(image.id) ? "ring-2 ring-primary" : ""
            }`}
            onClick={() => handleImageSelect(image.id)}
          >
            <img
              src={image.url}
              alt={image.title}
              className="rounded-lg object-cover"
            />
            {selectMode && (
              <div className="absolute inset-0 bg-black/20 flex items-center justify-center">
                {selectedImages.includes(image.id) ? "✔️" : "Select"}
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Floating Toolbar (Conditionally Rendered) */}
      <AnimatePresence>
        {selectMode && selectedImages.length > 0 && (
          <FloatingToolbar
            selectedCount={selectedImages.length}
            onDeselect={() => {
              setSelectedImages([]);
              setSelectMode(false);
            }}
            onDelete={handleDeleteSelected}
            onDownload={handleDownloadSelected}
            onEdit={handleEditSelected}
          />
        )}
      </AnimatePresence>
    </div>
  );
}