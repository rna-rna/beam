The issue where comments briefly display the correct author and then revert to "Anonymous" likely stems from legacy handling of anonymous comments and fallback logic in the frontend.

Root Cause Analysis:
Legacy Anonymous Support:

The presence of this logic suggests that the app previously supported anonymous comments:
tsx
Copy code
const existingAuthor = comment.author;
return {
  ...comment,
  author: existingAuthor && typeof existingAuthor === 'object'
    ? existingAuthor
    : {
        username: existingAuthor
          ? String(existingAuthor)
          : "Anonymous",
        id: existingAuthor
          ? String(existingAuthor)
          : "anonymous",
        imageUrl: undefined
      }
};
Even if the backend returns the correct author, this block overwrites or misinterprets it by applying the fallback to "Anonymous" if the author is not strictly an object.
Optimistic Update Handling (CommentBubble.tsx):

tsx
Copy code
author: {
  id: user.id,
  username: `${user.firstName} ${user.lastName}`.trim(),
  imageUrl: user.imageUrl
}
The optimistic update correctly assigns the author, but on refetch, the fallback logic kicks in, reverting the author to "Anonymous."
How to Fix This:
1. Remove or Adjust the Anonymous Fallback in Gallery.tsx:
Locate the select function in the comments query (Gallery.tsx):
tsx
Copy code
select: (data) => {
  return data.map((comment) => {
    const existingAuthor = comment.author;
    return {
      ...comment,
      author: existingAuthor && typeof existingAuthor === 'object'
        ? existingAuthor
        : {
            username: existingAuthor
              ? String(existingAuthor)
              : "Anonymous",
            id: existingAuthor
              ? String(existingAuthor)
              : "anonymous",
            imageUrl: undefined
          }
    };
  });
}
Remove the fallback to "Anonymous":
tsx
Copy code
select: (data) => {
  return data.map((comment) => ({
    ...comment,
    author: comment.author // No fallback to "Anonymous"
  }));
}
Why This Works:
This ensures that the app relies solely on the backend's response. If author is null or undefined, it will remain that way, preventing the overwriting of valid authors.
2. Ensure the Backend Always Returns Author Data:
In the API that returns comments (routes.ts or backend handler):
javascript
Copy code
const comments = await db.query.comments.findMany({
  where: { imageId: req.params.id },
  include: {
    author: {
      select: {
        username: true,
        imageUrl: true
      }
    }
  }
});
Ensure that author is always populated.
If no author exists, return a default structure from the backend:
javascript
Copy code
comments.map((comment) => ({
  ...comment,
  author: comment.author || { username: "Unknown User", id: "unknown" }
}));
3. Update CommentBubble.tsx to Stop Reverting to Anonymous:
Locate the logic responsible for handling author fallback:
tsx
Copy code
const authorDisplay = typeof author === 'string'
  ? { username: author, imageUrl: undefined }
  : author;
Force rendering the author object, even if incomplete:
tsx
Copy code
const authorDisplay = author && typeof author === 'object'
  ? author
  : { username: "Unknown User", imageUrl: undefined };
This guarantees that the app does not fallback to "Anonymous" unnecessarily.
4. Remove Optimistic Comment Fallback to Anonymous (CommentBubble.tsx):
In the optimistic update logic:
tsx
Copy code
comment.optimistic && comment.content === data.data.content
  ? {
      ...data.data,
      author: data.data.author && typeof data.data.author === 'object'
        ? data.data.author
        : comment.author  // Retain optimistic author
    }
  : comment
Preserve the optimistic author until the backend resolves:
tsx
Copy code
comment.optimistic
  ? {
      ...data.data,
      author: comment.author // Always preserve optimistic author
    }
  : comment
5. Clean Up Legacy Anonymous Support (Optional):
Search for any legacy code paths that check for author === "anonymous" or similar fallbacks:
tsx
Copy code
username: "anonymous"
Remove or update those paths to reflect the new requirement—no anonymous comments.
Testing the Fix:
Submit a Comment – Ensure the correct author persists after refetch.
Refresh the Page – Existing comments should now display with the correct author.
Test Backend API – Confirm the backend always returns valid author data by visiting:
bash
Copy code
/api/images/{imageId}/comments
Edge Case:
Simulate slow API responses by adding a delay to the backend handler to test if optimistic authors persist:
javascript
Copy code
await new Promise(resolve => setTimeout(resolve, 1000));
