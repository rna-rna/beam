Let's implement the "Notify people" checkbox and add the link-based permissions (Anyone with the link can View or Comment) similar to Google Drive.

Approach Overview:
1. "Notify people" Checkbox:
A simple checkbox that is checked by default.
If unchecked, users will be added silently without receiving an email notification.
2. Link-Based Permissions:
Options for:
Anyone with the link can view.
Anyone with the link can comment.
Managed with a toggle that adjusts gallery visibility dynamically.
Step 1: Update ShareModal to Add "Notify People" and Link Permissions:
tsx
Copy code
import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { debounce } from "lodash";

interface ShareModalProps {
  isOpen: boolean;
  onClose: () => void;
  isPublic: boolean;
  onVisibilityChange: (checked: boolean) => void;
  galleryUrl: string;
  slug: string;
}

interface User {
  id: string;
  email: string;
  fullName: string;
  avatarUrl: string | null;
  found: boolean;
}

export function ShareModal({ 
  isOpen, 
  onClose, 
  isPublic: initialIsPublic, 
  onVisibilityChange, 
  galleryUrl,
  slug 
}: ShareModalProps) {
  const [email, setEmail] = useState("");
  const [role, setRole] = useState("View");
  const [userSuggestions, setUserSuggestions] = useState<User[]>([]);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);
  const [notifyPeople, setNotifyPeople] = useState(true);  // Default to true
  const [linkPermission, setLinkPermission] = useState("view");  // Default: View link
  const { toast } = useToast();

  const lookupUser = debounce(async (query: string) => {
    if (!query || query.length < 3) {
      setUserSuggestions([]);
      return;
    }
    setLoading(true);

    try {
      const res = await fetch(`/api/users/search?email=${query}`);
      const data = await res.json();
      setUserSuggestions(data.users || []);
    } catch (error) {
      console.error("Failed to fetch users:", error);
    } finally {
      setLoading(false);
    }
  }, 300);

  useEffect(() => {
    lookupUser(email);
  }, [email]);

  const handleSelectUser = (user: User) => {
    setSelectedUser(user);
    setEmail(user.email);
    setUserSuggestions([]);
  };

  const inviteMutation = useMutation({
    mutationFn: async () => {
      const res = await fetch(`/api/galleries/${slug}/invite`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email,
          role,
          notifyByEmail: notifyPeople || !selectedUser?.found,
        }),
      });

      if (!res.ok) throw new Error("Failed to send invite");
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: "Invite sent",
        description: notifyPeople
          ? `Invitation sent to ${email}`
          : `User ${email} added without notification`,
      });
      setEmail("");
      setSelectedUser(null);
      setNotifyPeople(true);
    },
    onError: (error) => {
      toast({
        title: "Failed to send invite",
        description: error instanceof Error ? error.message : "Please try again",
        variant: "destructive",
      });
    },
  });

  const handleInvite = (e: React.FormEvent) => {
    e.preventDefault();
    inviteMutation.mutate();
  };

  // Handle link permissions toggle
  const handleLinkPermissionChange = (permission: string) => {
    setLinkPermission(permission);
    fetch(`/api/galleries/${slug}/link-permission`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ permission }),
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Share Gallery</DialogTitle>
        </DialogHeader>
        <div className="space-y-6">
          {/* Link Permission Control */}
          <div className="space-y-2">
            <span className="block text-sm font-medium">Link Sharing</span>
            <select
              value={linkPermission}
              onChange={(e) => handleLinkPermissionChange(e.target.value)}
              className="w-full p-2 border rounded"
            >
              <option value="view">Anyone with the link can view</option>
              <option value="comment">Anyone with the link can comment</option>
              <option value="none">Restricted (invite only)</option>
            </select>
          </div>

          {/* Email Invite Form */}
          <form onSubmit={handleInvite} className="space-y-4">
            <div className="relative">
              <label htmlFor="email-input">Invite by email</label>
              <Input
                id="email-input"
                type="email"
                placeholder="Enter email address"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
              {loading && <p>Searching...</p>}
            </div>

            {/* Notify People Toggle */}
            <div className="flex items-center justify-between">
              <span>Notify people by email</span>
              <Switch
                checked={notifyPeople}
                onCheckedChange={(checked) => setNotifyPeople(checked)}
              />
            </div>

            <Button type="submit" className="w-full">
              {inviteMutation.isPending ? "Sending..." : "Send Invite"}
            </Button>
          </form>
        </div>
      </DialogContent>
    </Dialog>
  );
}
