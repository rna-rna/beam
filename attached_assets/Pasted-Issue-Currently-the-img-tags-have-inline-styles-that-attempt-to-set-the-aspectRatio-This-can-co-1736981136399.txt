Issue:
Currently, the <img> tags have inline styles that attempt to set the aspectRatio. This can conflict with the AspectRatio component, leading to constrained thumbnails.

Solution:
Remove the inline aspectRatio styles from the <img> tags and let the AspectRatio component handle it entirely.

Implementation:

jsx
Copy
const renderImage = (image: ImageOrPending, index: number) => (
  <div key={image.id === -1 ? `pending-${index}` : image.id} className="image-container">
    <motion.div
      layout={draggedItemIndex === index ? false : "position"}
      className={cn(
        "mb-4 image-container relative transform transition-all duration-200 ease-out w-full",
        isReorderMode && "cursor-grab active:cursor-grabbing",
        "block",
      )}
      style={{
        breakInside: "avoid",
      }}
      initial={{ opacity: 0, y: 20 }}
      animate={{
        opacity: 1,
        y: 0,
        scale: draggedItemIndex === index ? 1.1 : 1,
        zIndex: draggedItemIndex === index ? 100 : 1,
      }}
      drag={isReorderMode}
      dragMomentum={false}
      dragElastic={0.1}
      onDragStart={() => setDraggedItemIndex(index)}
      onDrag={(event, info) => {
        setDragPosition({ x: info.point.x, y: info.point.y });
      }}
      onDragEnd={(event, info) =>
        handleDragEnd(event as PointerEvent, index, info)
      }
    >
      <div
        className={`group relative bg-card rounded-lg transform transition-all ${
          !isReorderMode ? "hover:scale-[1.02] cursor-pointer" : ""
        } ${selectMode ? "hover:scale-100" : ""} ${
          isReorderMode
            ? "border-2 border-dashed border-gray-200 border-opacity-50"
            : ""
        }`}
        onClick={(e) => {
          if (isReorderMode) {
            e.stopPropagation();
            return;
          }
          selectMode
            ? handleImageSelect(image.id, e)
            : handleImageClick(index);
        }}
      >
        {/* Use AspectRatio component without conflicting inline styles */}
        <AspectRatio ratio={image.width && image.height ? image.width / image.height : 4 / 3}>
          <div className="relative w-full h-full">
            <img
              src={'localUrl' in image ? image.localUrl : image.url}
              alt={image.originalFilename || "Uploaded image"}
              className={cn(
                "absolute inset-0 w-full h-full object-cover rounded-lg blur-up block transition-opacity duration-200",
                selectMode && selectedImages.includes(image.id) && "opacity-75",
                draggedItemIndex === index && "opacity-50",
                'localUrl' in image && "opacity-80",
                image.status === "error" && "opacity-50",
              )}
              loading="lazy"
              onLoad={(e) => {
                const img = e.currentTarget;
                img.classList.add("loaded");
                if (!('localUrl' in image) && image.pendingRevoke) {
                  setTimeout(() => {
                    URL.revokeObjectURL(image.pendingRevoke);
                  }, 800);
                }
              }}
              onError={(e) => {
                console.error("Image load failed:", {
                  id: image.id,
                  url: image.url,
                  isPending: 'localUrl' in image,
                  status: image.status,
                  originalFilename: image.originalFilename,
                });
                if (!('localUrl' in image)) {
                  e.currentTarget.src = "https://cdn.beam.ms/placeholder.jpg";
                  setImages((prev) =>
                    prev.map((upload) =>
                      upload.id === image.id
                        ? { ...upload, status: "error", _status: "error" }
                        : upload,
                    ),
                  );
                }
              }}
              draggable={false}
            />
          </div>
        </AspectRatio>

        {/* Overlays and UI Elements */}
        {'localUrl' in image && (
          <div className="absolute inset-0 flex items-center justify-center ring-2 ring-purple-500/40">
            {image.status === "uploading" && (
              <div className="absolute top-2 right-2 bg-background/80 backdrop-blur-sm p-2 rounded-full">
                <Loader2 className="h-4 w-4 animate-spin" />
              </div>
            )}
            {image.status === "error" && (
              <div className="absolute top-2 right-2 bg-destructive/80 backdrop-blur-sm p-2 rounded-full">
                <AlertCircle className="h-4 w-4 text-destructive-foreground" />
              </div>
            )}
            {image.status === "uploading" && (
              <Progress value={image.progress} className="w-3/4 h-1" />
            )}
          </div>
        )}

        {/* Starred avatars in bottom left corner */}
        {!selectMode && (
          <div className="absolute bottom-2 left-2 z-10">
            <StarredAvatars imageId={image.id} />
          </div>
        )}

        {/* Star button in bottom right corner */}
        {!selectMode && (
          <motion.div
            className="absolute bottom-2 right-2 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-200"
            animate={{ scale: 1 }}
            whileTap={{ scale: 0.8 }}
          >
            <Button
              variant="secondary"
              size="icon"
              className="h-7 w-7 bgbackground/80 hover:bg-background shadow-sm backdrop-blur-sm"
              onClick={(e) => {
                e.stopPropagation();
                // Star toggle logic
              }}
            >
              {/* Star Icon */}
              {image.userStarred ? (
                <Star className="h-4 w-4 fill-black dark:fill-white transition-all duration-300" />
              ) : (
                <Star className="h-4 w-4 stroke-black dark:stroke-white fill-transparent transition-all duration-300" />
              )}
            </Button>
          </motion.div>
        )}

        {/* Comment count badge */}
        {!selectMode && image.commentCount! > 0 && (
          <Badge
            className="absolute top-2 right-2 bg-primary text-primary-foreground flex items-center gap-1"
            variant="secondary"
          >
            <MessageSquare className="w-3 h-3" />
            {image.commentCount}
          </Badge>
        )}

        {/* Selection checkbox */}
        {selectMode && !isReorderMode && (
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            className="absolute top-2 right-2 z-10"
          >
            <div
              className={`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors ${
                selectedImages.includes(image.id)
                  ? "bg-primary border-primary"
                  : "bg-background/80 border-background/80"
              }`}
            >
              {selectedImages.includes(image.id) && (
                <CheckCircle className="w-4 h-4 text-primary-foreground" />
              )}
            </div>
          </motion.div>
        )}
      </div>
    </motion.div>
  </div>
);
