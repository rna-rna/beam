Create API Routes to Handle Star/Unstar:

File: routes.ts
ts
Copy code
// Star an image
app.post('/api/images/:imageId/star', async (req, res) => {
  const { imageId } = req.params;
  const userId = req.auth.userId;

  try {
    // Insert star record if it doesn't exist
    const [star] = await db.insert(stars).values({
      userId,
      imageId: Number(imageId)
    }).onConflictDoNothing();

    res.json({ success: true, star });
  } catch (error) {
    res.status(500).json({ message: 'Failed to star image' });
  }
});

// Unstar an image
app.delete('/api/images/:imageId/unstar', async (req, res) => {
  const { imageId } = req.params;
  const userId = req.auth.userId;

  await db.delete(stars).where(
    and(eq(stars.userId, userId), eq(stars.imageId, Number(imageId)))
  );

  res.json({ success: true });
});

// Fetch users who starred an image
app.get('/api/images/:imageId/stars', async (req, res) => {
  const { imageId } = req.params;

  const starData = await db.query.stars.findMany({
    where: eq(stars.imageId, Number(imageId)),
    with: {
      user: true  // Join user table for avatar/fname
    }
  });

  res.json(starData);
});
Phase 3 â€“ Frontend (Gallery.tsx and Image Component):
3. Display Starred Avatars on Images (Gallery.tsx):

tsx
Copy code
import { useQuery, useMutation } from "@tanstack/react-query";
import { useUser } from "@clerk/clerk-react";
import { Star, User } from "lucide-react";

// Component to display star stack
const StarredAvatars = ({ imageId }) => {
  const { data: stars = [] } = useQuery([`/api/images/${imageId}/stars`]);

  // Limit to 3 avatars visible at once
  const visibleStars = stars.slice(0, 3);
  const remainingCount = stars.length - visibleStars.length;

  return (
    <div className="relative flex items-center">
      {visibleStars.map((star, index) => (
        <div
          key={star.id}
          className="w-8 h-8 rounded-full overflow-hidden border-2 border-white"
          style={{ transform: `translateX(-${index * 16}px)` }}
        >
          <img src={star.user.avatarUrl} alt={star.user.firstName} />
        </div>
      ))}
      {remainingCount > 0 && (
        <div
          className="w-8 h-8 rounded-full bg-muted flex items-center justify-center border-2 border-white"
          style={{ transform: `translateX(-${visibleStars.length * 16}px)` }}
        >
          +{remainingCount}
        </div>
      )}
    </div>
  );
};

// Star/Unstar Button on Each Image
const StarButton = ({ imageId }) => {
  const { user } = useUser();
  const { mutate: starImage } = useMutation(() => 
    fetch(`/api/images/${imageId}/star`, { method: "POST" })
  );

  const { mutate: unstarImage } = useMutation(() => 
    fetch(`/api/images/${imageId}/unstar`, { method: "DELETE" })
  );

  return (
    <button
      onClick={() => starImage()}
      className="absolute top-4 right-4 p-2 bg-white rounded-full shadow-lg"
    >
      <Star />
    </button>
  );
};