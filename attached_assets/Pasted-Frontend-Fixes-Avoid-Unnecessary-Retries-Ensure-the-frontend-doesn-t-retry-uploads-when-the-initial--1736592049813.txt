Frontend Fixes
Avoid Unnecessary Retries
Ensure the frontend doesnâ€™t retry uploads when the initial upload is successful.
In UploadDropzone:

javascript
Copy code
const onDrop = useCallback(async (acceptedFiles) => {
  if (isUploading) {
    console.log('[Upload] Upload already in progress, skipping.');
    return;
  }

  try {
    if (!acceptedFiles?.length) {
      toast({
        title: 'No files selected',
        description: 'Please upload valid image files.',
        variant: 'destructive',
      });
      return;
    }

    // Validate file types and sizes
    const invalidFiles = acceptedFiles.filter(
      file => !file.type.startsWith('image/') || file.size > 10 * 1024 * 1024
    );

    if (invalidFiles.length) {
      toast({
        title: 'Invalid files detected',
        description: 'Please only upload images under 10MB in size.',
        variant: 'destructive',
      });
      return;
    }

    setIsUploading(true);
    setUploadProgress(0);

    const { urls } = await requestSignedUrls(acceptedFiles);

    console.log('[Upload] Starting upload attempt:', {
      files: acceptedFiles.map(f => ({
        name: f.name,
        size: `${Math.round(f.size / 1024)}KB`,
        type: f.type,
      })),
      timestamp: new Date().toISOString(),
    });

    await Promise.all(
      acceptedFiles.map(async (file, index) => {
        const { signedUrl } = urls[index];
        await fetch(signedUrl, {
          method: 'PUT',
          headers: { 'Content-Type': file.type },
          body: file,
        });
        console.log(`[Upload] Successfully uploaded: ${file.name}`);
        setUploadProgress(((index + 1) / acceptedFiles.length) * 100);
      })
    );

    toast({
      title: 'Upload complete',
      description: 'All files were successfully uploaded.',
    });

    onUpload(acceptedFiles);
  } catch (error) {
    console.error('[Upload Error]:', error);
    toast({
      title: 'Upload failed',
      description: error.message,
      variant: 'destructive',
    });
  } finally {
    setIsUploading(false);
    setUploadProgress(0);
  }
}, [onUpload, isUploading]);