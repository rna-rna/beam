Below is a concise, end-to-end flow for identifying users with Mixpanel whenever they create a gallery. I’ll show both client-side (React) and server-side (Node) approaches so you can choose whichever fits your workflow.

1) Ensure You Have the User’s ID
You need a user ID from your auth provider (e.g. Clerk, Auth0, Firebase, etc.). The ID lets you call mixpanel.identify(userId). On the server side, you’ll pass it as the distinct_id property.

Example: With Clerk, the user ID is available via useUser() (React) or via req.auth?.userId (Node).

2) Call mixpanel.identify (Client-Side)
In your main App.tsx (or top-level component), once the user object is loaded, do:

tsx
Copy
Edit
// App.tsx (example using Clerk)
import React, { useEffect } from "react";
import { useUser } from "@clerk/clerk-react";
import { initMixpanel, mixpanel } from "./analytics";

export default function App() {
  const { user } = useUser();

  useEffect(() => {
    initMixpanel();

    if (user?.id) {
      // "Identify" ties future events to the same user
      mixpanel.identify(user.id);

      // Optionally store user’s name/email in Mixpanel’s “People” profile
      mixpanel.people.set({
        $email: user.primaryEmailAddress?.emailAddress,
        $name: [user.firstName, user.lastName].filter(Boolean).join(" "),
      });
    }
  }, [user]);

  return <YourAppCode />;
}
Now any mixpanel.track("Some Event") calls will be associated with user.id.

3) Track the “Gallery Created” Event (Client-Side)
Wherever you create a gallery on the client, do something like:

ts
Copy
Edit
async function createGallery(title: string) {
  const response = await fetch("/api/galleries/create", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ title }),
  });
  if (!response.ok) throw new Error("Failed to create gallery");

  const data = await response.json();

  // Track the event in Mixpanel, with extra context
  mixpanel.track("Gallery Created", {
    galleryId: data.id,
    gallerySlug: data.slug,
    galleryTitle: data.title,
  });

  return data;
}
The user ID is already identified from step 2, so these events will map to that user’s profile in Mixpanel.

4) (Optional) Identify & Track on the Server
If you’re creating galleries from your Node backend instead of the client, do:

Install the server library:
bash
Copy
Edit
npm install mixpanel
Initialize it with your token:
js
Copy
Edit
// server/mixpanel.js
const Mixpanel = require("mixpanel");
const mixpanel = Mixpanel.init(process.env.MIXPANEL_TOKEN);

module.exports = { mixpanel };
In your gallery-creation route, pass distinct_id:
js
Copy
Edit
// server/routes.js
const { mixpanel } = require("./mixpanel");

app.post("/api/galleries/create", async (req, res) => {
  try {
    // Suppose you get userId from your auth
    const userId = req.auth?.userId; 
    // Create gallery
    const gallery = { id: 123, slug: "abc123", title: "Sample" }; 
    // ...

    mixpanel.track("Gallery Created", {
      distinct_id: userId,
      galleryId: gallery.id,
      gallerySlug: gallery.slug,
      galleryTitle: gallery.title,
    });

    res.json(gallery);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Could not create gallery" });
  }
});
Optionally set “people” properties from the backend:
js
Copy
Edit
mixpanel.people.set(userId, {
  $name: "Jane Smith",
  $email: "jane@example.com",
});
