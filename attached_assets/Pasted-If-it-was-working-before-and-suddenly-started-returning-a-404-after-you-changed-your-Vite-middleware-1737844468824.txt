If it was working before and suddenly started returning a 404 after you changed your Vite middleware setup, that strongly indicates it’s a middleware ordering issue or a path mismatch introduced by your new configuration.

Likely Causes (Given It “Used to Work”)
Route Got Moved Below Vite’s Catch-All

If you’re now calling app.use(vite.middlewares) before defining the POST /pusher/auth route, Vite might handle the request first and return a 404 or index.html.
A typical fix is to move your POST /pusher/auth route above the vite.middlewares call.
Auth Endpoint No Longer Matches

Perhaps your Pusher client is still configured to use "/pusher/auth", but the server route is now "/api/pusher/auth" (or vice versa).
Double-check both your server code and the authEndpoint in the Pusher client config to ensure they match exactly.
Protected Route vs. Unprotected

If you changed it from app.post("/pusher/auth", ...) to protectedRouter.post("/pusher/auth", ...), your Pusher client might not be sending credentials properly. That can yield 404 or 401 if your auth middleware returns an error or redirect.
If you want a presence channel behind an auth route, make sure you pass the correct headers or cookies in the Pusher client.
How to Fix
Confirm the route definition for Pusher auth is still in place and identical to how it was before.
Ensure it’s mounted before the line where you do app.use(vite.middlewares).
Check your Pusher client code for authEndpoint: "/pusher/auth" (or similar). If your server route is "/api/pusher/auth", update one side to match the other.
Check Replit logs to see if the server logs an incoming request to POST /pusher/auth. If not, it means the route was never reached (implying a mismatch in path or the request was consumed by Vite’s dev server).
Since you say “it was working perfectly before,” odds are simply that your new Vite config or new route ordering overshadowed your existing pusher/auth route. Moving the code or re-checking the path typically resolves it.