2. Fix Progress Bar
The progress bar shows 100% because uploadedBytes or totalSize isn't being updated properly in updateProgress. Ensure:

Progress is incremented as chunks are uploaded.
updateProgress reflects the cumulative uploaded bytes relative to the total size.
Update UploadDropzone.tsx:
Track per-file progress using Map to manage individual file progress and aggregate these values.

tsx
Copy code
const onDrop = useCallback(async (acceptedFiles: File[]) => {
  if (!acceptedFiles?.length) return;

  const uploadId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  const totalSize = acceptedFiles.reduce((acc, file) => acc + file.size, 0);
  const fileProgress = new Map<number, number>();
  let totalUploadedBytes = 0;

  startUpload(uploadId, totalSize, acceptedFiles.length);

  try {
    const { urls } = await fetch("/api/upload-endpoint").then((res) => res.json());

    for (const [index, urlData] of urls.entries()) {
      const file = acceptedFiles[index];
      const xhr = new XMLHttpRequest();

      fileProgress.set(index, 0); // Track progress for each file

      xhr.upload.onprogress = (event) => {
        if (event.lengthComputable) {
          const currentProgress = event.loaded;
          const previousProgress = fileProgress.get(index) || 0;
          const incrementBytes = currentProgress - previousProgress;

          fileProgress.set(index, currentProgress);
          totalUploadedBytes += incrementBytes;
          updateProgress(Math.min(totalUploadedBytes, totalSize));
        }
      };

      xhr.open('PUT', urlData.signedUrl, true);
      xhr.setRequestHeader('Content-Type', file.type);

      await new Promise((resolve, reject) => {
        xhr.onload = () => (xhr.status === 200 ? resolve(xhr.response) : reject(xhr.statusText));
        xhr.onerror = () => reject(new Error(`Failed to upload ${file.name}`));
        xhr.send(file);
      });
    }

    onUpload();

  } catch (error) {
    console.error("[Upload Error]:", error);
  } finally {
    completeUpload(uploadId);
  }
}, [onUpload, startUpload, updateProgress, completeUpload]);
