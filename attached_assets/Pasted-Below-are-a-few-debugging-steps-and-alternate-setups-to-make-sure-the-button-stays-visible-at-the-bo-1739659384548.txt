Below are a few debugging steps and alternate setups to make sure the button stays visible at the bottom of the sidebar without causing overflow.

1) Simplest Approach: “Fixed” Sidebar
Sometimes the easiest way is to make the sidebar truly fixed. For instance, in your RecentsPage.tsx:

diff
Copy
Edit
export default function RecentsPage() {
  return (
-   <div className="flex h-screen bg-background">
+   <div className="bg-background">
      {/* Instead of sticky, use fixed */}
-     <aside className="hidden md:block w-64 border-r sticky top-0 h-screen">
+     <aside className="hidden md:block fixed top-0 left-0 h-screen w-64 border-r bg-background z-50">
        <DashboardSidebar />
      </aside>

+     {/* Then push main content to the right */}
+     <main className="ml-64 flex flex-col min-h-screen">
+       {/* Now do your header + content here */}
        ...
+     </main>
    </div>
  );
}
The sidebar is position: fixed; top: 0; left: 0; width: 16rem; height: 100vh;.
Then your main content is offset with ml-64.
No matter what else is on the page, that sidebar doesn’t scroll and the “Add Folder” button will remain at the bottom.
That’s the most bulletproof if you truly want a pinned, non‐scrolling sidebar. But it requires you to offset the main content accordingly (ml-64).

2) If You Prefer “Sticky” Over “Fixed”
Using sticky top-0 h-screen can work, but:

The sidebar’s parent container must not itself be scrolling or clipped (or sticky fails).

You often need an offset if there’s a site header. For example, if you have a 64px header at the top, do:

html
Copy
Edit
<aside class="sticky top-[64px] h-[calc(100vh-64px)] w-64 border-r">
  <DashboardSidebar />
</aside>
If you also have a parent container with overflow-auto, that can break sticky. Sticky only works inside the nearest scrolling ancestor.

In short, if you have a site-wide header, you often do:

html
Copy
Edit
<header class="h-16 ...">Site Header</header>
<div class="flex">
  <aside class="sticky top-16 h-[calc(100vh-4rem)] w-64 ...">
    ...
  </aside>
  <main class="flex-1 overflow-auto">...</main>
</div>
Make sure that the parent of that <aside> does not set its own overflow. Otherwise, sticky will only pin relative to that parent’s scroll area.

3) Inside DashboardSidebar, Use “flex‐col, flex‐1” Instead of h-full
If the parent is pinned to 100vh, do this inside the sidebar:

diff
Copy
Edit
function DashboardSidebar() {
  return (
-   <div className="flex flex-col h-full">
+   <div className="flex flex-col flex-1">
      <ScrollArea className="flex-1">
        {/* folder items */}
      </ScrollArea>
      <div className="shrink-0 p-4 border-t">
        <Button className="w-full" onClick={() => setIsCreateOpen(true)}>
          <FolderPlus className="mr-2 h-4 w-4" /> Add Folder
        </Button>
      </div>
    </div>
  );
}
flex-1 ensures that the sidebar’s height is inherited from the parent (which is pinned to the screen).
The <ScrollArea className="flex-1"> is now the portion that scrolls if you have many folders, while the “Add Folder” button stays pinned below.
