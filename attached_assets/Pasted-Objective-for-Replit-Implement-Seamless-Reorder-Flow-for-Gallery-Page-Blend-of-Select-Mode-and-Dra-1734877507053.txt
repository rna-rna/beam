Objective for Replit: Implement Seamless Reorder Flow for Gallery Page (Blend of Select Mode and Drag Handles)
Goal:
Create an intuitive reorder system for the Gallery Page that blends the fluidity of drag-and-drop with the structured feel of Select Mode. This approach should:

Allow users to reorder images directly after entering Select Mode.
Provide visual drag handles for clarity, ensuring the reordering action feels distinct from normal selection.
Work seamlessly on both desktop and mobile (with long-press activation on touch devices).
Maintain consistency with existing UI patterns (such as delete and select actions).
Implementation Overview:
Entry Point:
Users trigger Select Mode by clicking the "Select" button at the top-right of the gallery.
Once in Select Mode, an additional "Reorder" button appears alongside the delete action.
Reorder Mode Activation:
Clicking the "Reorder" button activates drag-and-drop reordering.
Drag handles (small bars or dots) appear in the corner of each image, signaling the images can now be rearranged.
Dragging Behavior:
Users click and drag the handles (desktop) or long-press the images (mobile) to reorder.
The grid dynamically adjusts, with placeholders showing the intended drop zones.
Exiting Reorder Mode:
A "Done" button replaces the "Reorder" button to exit Reorder Mode.
Alternatively, clicking outside the grid or pressing Esc exits Reorder Mode automatically.
Instructions for Replit (Step-by-Step Implementation):
1. State Management for Reorder Mode (Gallery.tsx):
Add state hooks to manage Select and Reorder modes.

tsx
Copy code
const [selectMode, setSelectMode] = useState(false);
const [isReorderMode, setIsReorderMode] = useState(false);

const toggleSelectMode = () => {
  setSelectMode(!selectMode);
  setIsReorderMode(false);  // Reset reorder if exiting select mode
};

const toggleReorderMode = () => {
  setIsReorderMode(!isReorderMode);
};
2. Add Reorder Button to Select Mode Toolbar:
Update the toolbar to show Reorder and Delete options when Select Mode is active.

tsx
Copy code
<div className="fixed top-4 right-6 z-50 flex gap-4">
  {selectMode ? (
    <>
      <button
        onClick={toggleReorderMode}
        className={`px-4 py-2 rounded-md ${
          isReorderMode ? "bg-blue-600 text-white" : "bg-gray-200"
        }`}
      >
        {isReorderMode ? "Done" : "Reorder"}
      </button>
      <button
        onClick={handleDelete}
        className="px-4 py-2 bg-red-500 text-white rounded-md"
      >
        Delete
      </button>
    </>
  ) : (
    <button
      onClick={toggleSelectMode}
      className="px-4 py-2 bg-blue-500 text-white rounded-md"
    >
      Select
    </button>
  )}
</div>
3. Update Image Grid to Show Drag Handles in Reorder Mode:
When isReorderMode is active, drag handles should appear on each image.
Users can drag the image vertically or horizontally to reorder it.
tsx
Copy code
<Masonry
  breakpointCols={breakpointCols}
  className="flex -ml-4 w-[calc(100%+1rem)]"
  columnClassName="pl-4 bg-background"
>
  {gallery?.images.map((image: Image, index: number) => (
    <motion.div
      key={image.id}
      layout
      drag={isReorderMode ? "y" : false}
      dragConstraints={{ top: 0, bottom: 0 }}
      whileDrag={{ scale: 1.05 }}
      onDragEnd={(event, info) => handleDragEnd(event, index, info)}
      className="relative cursor-pointer"
    >
      {isReorderMode && (
        <div className="absolute top-2 left-2 z-10 cursor-grab active:cursor-grabbing">
          <svg width="18" height="18" fill="gray">
            <rect x="4" y="4" width="3" height="3" />
            <rect x="4" y="11" width="3" height="3" />
          </svg>
        </div>
      )}
      <img
        src={image.url}
        alt=""
        className={`w-full h-auto object-cover rounded-lg ${
          selectMode && selectedImages.includes(image.id) ? "opacity-75" : ""
        }`}
      />
    </motion.div>
  ))}
</Masonry>
4. Handle Drag End and Image Reordering:
Add logic to update image positions after drag ends.

tsx
Copy code
const handleDragEnd = (
  event: MouseEvent | TouchEvent,
  draggedIndex: number,
  info: PanInfo
) => {
  if (!gallery) return;

  const dragDistance = info.point.y;
  const imageHeight = event.currentTarget.clientHeight + 16; // Include margin
  const newIndex = Math.floor(dragDistance / imageHeight);

  if (newIndex !== draggedIndex && newIndex >= 0) {
    const updatedImages = [...gallery.images];
    const [movedImage] = updatedImages.splice(draggedIndex, 1);
    updatedImages.splice(newIndex, 0, movedImage);

    queryClient.setQueryData([`/api/galleries/${slug}`], {
      ...gallery,
      images: updatedImages,
    });

    reorderImageMutation.mutate(updatedImages.map((img) => img.id));
  }
};
5. Long Press for Mobile (Touch-Friendly Drag):
tsx
Copy code
onPointerDown={(e) => {
  if (!isReorderMode) return;
  const target = e.currentTarget;
  const timeout = setTimeout(() => {
    target.setAttribute("draggable", "true");
  }, 400);  // 400ms long press

  target.addEventListener("pointerup", () => clearTimeout(timeout), {
    once: true,
  });
}}
User Flow Breakdown (Gallery Page):
Enter Select Mode:

Click the "Select" button (top-right).
Checkboxes or subtle image dimming appears to indicate selection mode.
Activate Reorder:

Once in Select Mode, click "Reorder."
Drag handles appear on images, allowing for vertical drag-and-drop.
Drag to Reorder:

Click and drag images (desktop) or long-press to drag (mobile).
Drop zones appear as placeholders dynamically adjust the grid.
Exit Reorder Mode:

Click "Done" or tap outside the grid to exit reorder mode.
