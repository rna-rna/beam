Objective:
The goal is to create a single, intuitive filter button that allows users to toggle between different viewing modes (e.g., show favorites, show images with comments). This consolidates filtering into one accessible location without cluttering the main gallery interface.

Feature Breakdown:
Filter Button Location: Top-right of the gallery, next to existing menu or actions (favorites, copy link, etc.).
Dropdown or Modal Design: Clicking the filter button opens a dropdown/modal with multiple filter options.
Dynamic Filtering: As filters are applied, the gallery updates in real-time to reflect the selected images.
Implementation Steps:
1. Create Filter Button in the Header:
Add a "Filter" button to the gallery header (next to the favorites or menu button).
Add to Header Component:

tsx
Copy code
<div className="gallery-header flex justify-between items-center">
  <h1 className="text-2xl font-bold">Gallery</h1>
  <div className="flex space-x-4">
    <button className="text-gray-700">‚≠ê</button>
    <button className="text-gray-700">üîó</button>
    <button 
      className="text-gray-700 hover:text-black" 
      onClick={() => setFilterOpen(!filterOpen)}>
      üõ† Filter
    </button>
  </div>
</div>
2. Create Filter Modal/Dropdown (Conditional Rendering):
The modal/dropdown will appear when the filter button is clicked.
Use useState to track whether the filter menu is open.
Dropdown Component:

tsx
Copy code
{filterOpen && (
  <div className="absolute top-16 right-8 bg-white shadow-lg rounded-md p-4 w-56 z-50">
    <h3 className="text-lg font-semibold mb-3">Filter Options</h3>
    <div className="flex flex-col space-y-3">
      <label className="flex items-center">
        <input 
          type="checkbox" 
          checked={showFavorites} 
          onChange={() => setShowFavorites(!showFavorites)} />
        <span className="ml-2">Show Favorites</span>
      </label>
      <label className="flex items-center">
        <input 
          type="checkbox" 
          checked={showWithComments} 
          onChange={() => setShowWithComments(!showWithComments)} />
        <span className="ml-2">Show with Comments</span>
      </label>
      <label className="flex items-center">
        <input 
          type="checkbox" 
          checked={showApproved} 
          onChange={() => setShowApproved(!showApproved)} />
        <span className="ml-2">Show Approved</span>
      </label>
      <button 
        className="text-sm text-red-500 mt-2" 
        onClick={resetFilters}>
        Reset Filters
      </button>
    </div>
  </div>
)}
3. Add Filter State & Logic to Gallery Display:
Use state to track active filters and dynamically filter images based on applied conditions.
State and Filter Logic (Add to Gallery Component):

tsx
Copy code
const [filterOpen, setFilterOpen] = useState(false);
const [showFavorites, setShowFavorites] = useState(false);
const [showWithComments, setShowWithComments] = useState(false);
const [showApproved, setShowApproved] = useState(false);

// Filtered Gallery Logic
const filteredImages = gallery?.images.filter(image => {
  if (showFavorites && !image.isFavorite) return false;
  if (showWithComments && image.comments.length === 0) return false;
  if (showApproved && !image.isApproved) return false;
  return true;
});

// Reset All Filters
const resetFilters = () => {
  setShowFavorites(false);
  setShowWithComments(false);
  setShowApproved(false);
};
4. Update Gallery Display to Reflect Filters:
The filtered image list should update in real-time as the checkboxes are toggled.
Render Gallery with Filters Applied:

tsx
Copy code
<div className="gallery-grid grid grid-cols-3 gap-4">
  {filteredImages.map(image => (
    <div key={image.id} className="relative">
      <img src={image.url} alt="" className="w-full h-auto object-cover rounded-lg" />
      {image.isFavorite && (
        <span className="absolute top-2 left-2 bg-yellow-400 text-white px-2 py-1 text-xs rounded">
          ‚≠ê Favorite
        </span>
      )}
      {image.comments.length > 0 && (
        <span className="absolute top-2 right-2 bg-blue-400 text-white px-2 py-1 text-xs rounded">
          üí¨ {image.comments.length} Comments
        </span>
      )}
    </div>
  ))}
</div>
5. Add Active Filter Indicator (Optional):
Display the number of active filters next to the filter button.
Button Update for Active Filters:

tsx
Copy code
<button 
  className={`text-gray-700 hover:text-black ${activeFilters > 0 ? 'font-bold' : ''}`} 
  onClick={() => setFilterOpen(!filterOpen)}>
  üõ† Filter {activeFilters > 0 ? `(${activeFilters})` : ''}
</button>
Calculate Active Filters:

tsx
Copy code
const activeFilters = [showFavorites, showWithComments, showApproved].filter(Boolean).length;
Testing Instructions for Replit:
Filter Test:

Click the "Filter" button and apply combinations of filters.
Ensure the gallery updates immediately to reflect applied filters.
Toggle and Reset Test:

Toggle individual filters and verify that images with the correct properties are shown.
Test the "Reset Filters" button to ensure all filters are cleared.
Dropdown/Modal Behavior:

Confirm that the filter menu closes when clicking outside of it or toggling the button again.
