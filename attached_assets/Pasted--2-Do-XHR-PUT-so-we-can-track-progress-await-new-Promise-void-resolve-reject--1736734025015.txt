   // 2) Do XHR PUT so we can track progress
    await new Promise<void>((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.upload.onprogress = (ev) => {
        if (ev.lengthComputable) {
          const fraction = ev.loaded / ev.total; // 0..1
          const newProgress = fraction * 100;
          setPendingUploads((prev) =>
            prev.map((obj) =>
              obj.id === item.id
                ? { ...obj, progress: newProgress }
                : obj
            )
          );
        }
      };

      xhr.open("PUT", signedUrl, true);
      xhr.setRequestHeader("Content-Type", item.file.type);
      xhr.onload = () => {
        if (xhr.status === 200) {
          resolve();
        } else {
          reject(new Error(`Failed to upload ${item.file.name}`));
        }
      };
      xhr.onerror = () => {
        reject(new Error("Network error uploading file"));
      };
      xhr.send(item.file);
    });

    // 3) Once upload is done, we do a final local update:
    //    - replace localUrl with publicUrl
    //    - set status to 'done'
    //    - optionally store imageId so we can link server ops (like star, comment)
    setPendingUploads((prev) =>
      prev.map((obj) => {
        if (obj.id !== item.id) return obj;
        // Revoke old local object URL to free memory if you want
        URL.revokeObjectURL(obj.localUrl);
        return {
          ...obj,
          localUrl: publicUrl,
          status: "done",
          progress: 100,
        };
      })
    );

    // 4) Optionally invalidate or refetch so your "official" gallery images reload
    queryClient.invalidateQueries({ queryKey: [`/api/galleries/${slug}`] });

  } catch (error) {
    console.error("uploadSingleFile error:", error);
    // mark as error
    setPendingUploads((prev) =>
      prev.map((obj) =>
        obj.id === item.id
          ? { ...obj, status: "error" }
          : obj
      )
    );
  }
}
This approach does everything your old uploadMutation was doing, but for one file at a time and integrated with local progress.

