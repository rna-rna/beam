Step 2: Update Frontend for Direct Uploads
Modify UploadDropzone
Update the client-side uploadFile and uploadFileMultipart functions to:

Request signed URLs for each file or chunk.
Upload files directly to R2 using the signed URLs.
Code Update
Hereâ€™s how uploadFileMultipart and uploadFile should be updated:

javascript
Copy code
const uploadFileMultipart = async (file) => {
    const chunks = createFileChunks(file);
    const fileName = file.name;

    try {
        // Step 1: Request pre-signed URLs for all chunks
        const startRes = await fetch(`/api/galleries/${gallerySlug}/images`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                files: chunks.map((_, index) => ({
                    name: `${fileName}-chunk-${index}`,
                    type: 'application/octet-stream',
                })),
            }),
        });

        const { urls } = await startRes.json();

        // Step 2: Upload each chunk to R2
        const uploadResults = await Promise.all(
            chunks.map(async (chunk, index) => {
                const { signedUrl } = urls[index];
                const chunkRes = await fetch(signedUrl, {
                    method: 'PUT',
                    body: chunk,
                });

                if (!chunkRes.ok) {
                    throw new Error(`Chunk ${index} upload failed`);
                }
            })
        );

        // Step 3: Notify backend of completed upload (if needed)
        return uploadResults;
    } catch (error) {
        console.error('[Multipart Upload Error]', error);
        throw error;
    }
};

const uploadFile = async (file) => {
    if (file.size > USE_MULTIPART_THRESHOLD) {
        console.log(`Using multipart upload for: "${file.name}"`);
        return uploadFileMultipart(file);
    } else {
        console.log(`Using single PUT upload for: "${file.name}"`);

        // Request signed URL for single file
        const startRes = await fetch(`/api/galleries/${gallerySlug}/images`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                files: [
                    {
                        name: file.name,
                        type: file.type,
                    },
                ],
            }),
        });

        const { urls } = await startRes.json();
        const { signedUrl, publicUrl } = urls[0];

        // Upload file directly to R2
        const uploadRes = await fetch(signedUrl, {
            method: 'PUT',
            headers: {
                'Content-Type': file.type,
            },
            body: file,
        });

        if (!uploadRes.ok) {
            throw new Error(`Upload failed: ${uploadRes.statusText}`);
        }

        return publicUrl;
    }
};
