'use client'

import { useState, useEffect } from 'react'
import { ChevronLeft, ChevronRight, X, ZoomIn, ZoomOut, MessageCircle } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { cn } from '@/lib/utils'
import { Image } from '../types/gallery'

interface LightboxProps {
  images: Image[]
  initialIndex: number
  onClose: () => void
}

export default function Lightbox({ images, initialIndex, onClose }: LightboxProps) {
  const [currentIndex, setCurrentIndex] = useState(initialIndex)
  const [isZoomed, setIsZoomed] = useState(false)

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'ArrowLeft') handlePrevious()
      if (e.key === 'ArrowRight') handleNext()
      if (e.key === 'Escape') onClose()
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [onClose])

  const handlePrevious = () => {
    setCurrentIndex((prev) => (prev === 0 ? images.length - 1 : prev - 1))
  }

  const handleNext = () => {
    setCurrentIndex((prev) => (prev === images.length - 1 ? 0 : prev + 1))
  }

  const toggleZoom = () => {
    setIsZoomed((prev) => !prev)
  }

  const currentImage = images[currentIndex]

  return (
    <div className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center">
      <div className="absolute top-4 right-4 flex items-center gap-2">
        <Button
          variant="ghost"
          size="icon"
          onClick={toggleZoom}
          className="text-white hover:bg-white/10"
        >
          {isZoomed ? <ZoomOut className="h-5 w-5" /> : <ZoomIn className="h-5 w-5" />}
        </Button>
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="text-white hover:bg-white/10"
        >
          <X className="h-5 w-5" />
        </Button>
      </div>

      <Button
        variant="ghost"
        size="icon"
        onClick={handlePrevious}
        className="fixed left-4 top-1/2 -translate-y-1/2 text-white hover:bg-white/10"
      >
        <ChevronLeft className="h-8 w-8" />
      </Button>

      <div className="relative max-w-7xl mx-auto px-4">
        <img
          src={currentImage.src}
          alt={currentImage.alt}
          className={cn(
            "max-h-[85vh] w-auto mx-auto transition-transform duration-300",
            isZoomed ? "scale-150 cursor-zoom-out" : "cursor-zoom-in"
          )}
          onClick={toggleZoom}
        />
        <div className="absolute bottom-4 left-4 right-4 bg-black/50 text-white p-4 rounded-lg">
          <h2 className="text-lg font-semibold mb-2">{currentImage.alt}</h2>
          <div className="flex items-center justify-between">
            <span className="text-sm">{currentImage.date}</span>
            <div className="flex items-center gap-4">
              {currentImage.likes !== undefined && (
                <span className="flex items-center gap-1">
                  <MessageCircle className="h-4 w-4" />
                  {currentImage.likes}
                </span>
              )}
              {currentImage.comments !== undefined && (
                <span className="flex items-center gap-1">
                  <MessageCircle className="h-4 w-4" />
                  {currentImage.comments}
                </span>
              )}
            </div>
          </div>
        </div>
      </div>

      <Button
        variant="ghost"
        size="icon"
        onClick={handleNext}
        className="fixed right-4 top-1/2 -translate-y-1/2 text-white hover:bg-white/10"
      >
        <ChevronRight className="h-8 w-8" />
      </Button>
    </div>
  )
}

