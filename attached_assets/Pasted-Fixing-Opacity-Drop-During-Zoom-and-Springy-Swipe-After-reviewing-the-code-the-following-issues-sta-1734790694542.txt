Fixing Opacity Drop During Zoom and Springy Swipe
After reviewing the code, the following issues stand out:

Opacity Drops During Zoom:
The opacity transform applied to the outer motion.div reduces opacity as the user pans vertically (dragY).
This causes the image to become transparent during zoom or swipe, revealing the background gallery unintentionally.
Springy Swipe Behavior:
The swipe between images uses a spring transition with high stiffness and low damping, making the swipe feel too elastic.
This causes the images to bounce excessively when transitioning between slides.
Fix 1 – Prevent Opacity Drop During Zoom:
Separate the opacity transform for swipe down (dragY) from zoom actions (scaleValue).
Ensure the opacity drop only occurs when dragging vertically to exit, not during zoom or horizontal swipes.
Fix:

tsx
Copy code
const opacity = useTransform(
  dragY,
  [-400, 0, 400],
  [1, 1, 0],
  { clamp: false }
);
const imageOpacity = useTransform(
  scaleValue,
  [1, 3],
  [1, 1]  // Maintain full opacity during zoom
);
Apply to Image Separately:

tsx
Copy code
<motion.div
  className="absolute inset-0 w-full h-full"
  style={{ opacity }}  // Apply to background container
>
  <motion.img
    src={image.url}
    alt=""
    className="w-full h-full object-contain select-none"
    draggable={false}
    style={{
      scale: isActive ? (scaleValue.get() > 1 ? scaleValue : dragScale) : 1,
      x: offsetX,
      y: offsetY,
      opacity: imageOpacity,  // Ensure image remains opaque during zoom
    }}
    drag={scaleValue.get() > 1}
    dragElastic={0.2}
    dragMomentum={false}
    transition={{
      type: "spring",
      stiffness: 200,
      damping: 20,
    }}
  />
</motion.div>
Fix 2 – Reduce Springiness of Swipe Transitions:
Adjust the stiffness and damping to make the transitions smoother and less bouncy.
Use moderate damping to create a controlled yet responsive feel.
Fix:

tsx
Copy code
transition: {
  type: "spring",
  stiffness: 150,  // Lower stiffness for less bounce
  damping: 30,     // Higher damping for smoother stop
}
Apply this transition to both image swipes (animate and exit states).

Fix 3 – Snap Back After Swipe (Clamp X Offset):
Ensure that the image snaps back smoothly if the swipe isn’t strong enough to transition to the next image.
Handle Drag End:

tsx
Copy code
const handleDragEnd = (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
  const xOffset = info.offset.x;
  const yOffset = info.offset.y;
  const velocity = info.velocity.x;

  if (Math.abs(yOffset) > 150 && Math.abs(xOffset) < 50) {
    onClose();
    return;
  }

  if (scaleValue.get() > 1) {
    const scale = scaleValue.get();
    const maxX = (window.innerWidth / 2) * (scale - 1);
    const maxY = (window.innerHeight / 2) * (scale - 1);

    offsetX.set(clampPan(offsetX.get(), maxX));
    offsetY.set(clampPan(offsetY.get(), maxY));
    return;
  }

  const swipeThreshold = window.innerWidth * 0.35;  // Slightly increase threshold
  const velocityThreshold = 0.3;

  const shouldChangeImage =
    Math.abs(velocity) > velocityThreshold || Math.abs(xOffset) > swipeThreshold;

  if (shouldChangeImage) {
    const nextIndex = currentIndex + (xOffset > 0 ? -1 : 1);
    const clampedIndex = Math.max(0, Math.min(nextIndex, images.length - 1));
    setCurrentIndex(clampedIndex);
  }

  dragX.set(0);
  dragY.set(0);
  setIsDragging(false);
};
Final Improvements:
Prevent Background Flicker During Zoom:

Ensure background reveal (revealOpacity) stays darker for longer when zooming by limiting it to vertical swipes only.
Smooth Background Fade:

tsx
Copy code
const revealOpacity = useTransform(dragY, [-600, 0, 400], [0.1, 1, 0]);
Double Tap to Recenter (Recentering Fix):

tsx
Copy code
const resetZoom = () => {
  scaleValue.set(1);
  offsetX.set(0);
  offsetY.set(0);
  dragX.set(0);
  dragY.set(0);
};
