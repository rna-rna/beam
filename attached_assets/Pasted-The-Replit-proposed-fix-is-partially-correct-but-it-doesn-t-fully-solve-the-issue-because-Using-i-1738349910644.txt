The Replit-proposed fix is partially correct, but it doesnâ€™t fully solve the issue because:

Using invite.id instead of inviteToken in the update query â†’ âœ… Correct

Using invite.id ensures we're updating the right record.
Storing email in lowercase for consistency â†’ âœ… Correct

Prevents mismatches due to case sensitivity.
Adding debug logging â†’ âœ… Helpful

Makes debugging easier but doesnâ€™t solve the user_id issue.
Using invite.gallery?.slug instead of invite.galleryId â†’ âœ… Correct

Ensures the correct gallerySlug is returned.
What the Replit Fix Doesn't Address Properly
It does not ensure that user_id is always set for magic link users.
The main problem is magic link users register without user_id being stored in invites, making getGalleryUserRole() return null.
ðŸ”¹ The Correct Fix
Instead of just making small optimizations, we need to explicitly store user_id when verifying magic links.

Updated /auth/verify-magic-link Endpoint
typescript
Copy
Edit
app.post("/auth/verify-magic-link", async (req, res) => {
  const { inviteToken, email, userId } = req.body;

  try {
    // Find the invite using the token
    const invite = await db.query.invites.findFirst({
      where: eq(invites.token, inviteToken),
      with: { gallery: true } // Ensures gallery info is included
    });

    if (!invite) {
      return res.status(400).json({ 
        success: false,
        message: "Invalid or expired magic link" 
      });
    }

    console.log("Magic link verified:", { inviteToken, email, userId, invite });

    // Ensure the invite record has a user_id
    await db.update(invites)
      .set({ 
        userId,  // âœ… Explicitly store userId so getGalleryUserRole() works
        email: email.toLowerCase(), // âœ… Ensure email consistency
        token: null // âœ… Remove token after use for security
      })
      .where(eq(invites.id, invite.id));

    res.json({ 
      success: true,
      message: "Magic link verified successfully",
      gallerySlug: invite.gallery?.slug || null, // âœ… Ensures proper slug resolution
      role: invite.role
    });

  } catch (error) {
    console.error("Failed to verify magic link:", error);
    res.status(500).json({ 
      success: false,
      message: "Failed to verify magic link",
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});
