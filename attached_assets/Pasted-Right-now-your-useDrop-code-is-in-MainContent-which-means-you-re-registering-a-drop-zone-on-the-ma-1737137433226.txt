Right now, your useDrop code is in MainContent, which means you’re registering a drop zone on the main content area, not on the folder itself. If you want to “drag a gallery onto a specific folder,” you need a drop target on the folder button (or row) in the sidebar—otherwise the drop event will never fire when you hover over that folder in the sidebar.

Below is the typical pattern for folder-based DnD:

In DashboardSidebar.tsx, for each folder button (or list item), call useDrop(...) with that folder’s ID (or slug).
When a gallery is dropped, call your handleMoveGallery logic, passing that folder’s ID.
In MainContent (the code you pasted), you only need the useDrag logic for each gallery. You do not need a drop zone there if you’re dropping onto folders in the sidebar.
Why Your Current Approach Doesn’t Work
Your code in MainContent:

ts
Copy
const [{ isOver }, dropRef] = useDrop({
  accept: "GALLERY",
  drop: (item: { selectedIds: number[] }) => {
    if (currentFolder) {
      handleMoveGallery(item.selectedIds, currentFolder.id);
    }
  },
  ...
});
You never attach dropRef to any DOM element—so there’s no actual drop zone.
Even if you did attach dropRef to <div className="flex-1 p-6">, that’s just the big content area. Dropping a gallery onto that area will attempt to move it to the currently viewed folder (whatever currentFolder is). That’s probably not the user’s intention if they want to drop onto a different folder in the sidebar.
How to Fix It
A. Add a Drop Hook in Your Sidebar
In DashboardSidebar.tsx, for each folder’s <Button> (or <div>) that represents a folder, you’ll do:

tsx
Copy
// Example pseudocode
folders?.map((folder) => {
  const [{ isOver }, dropRef] = useDrop(() => ({
    accept: "GALLERY",
    drop: (item: { selectedIds: number[] }) => {
      handleMoveGallery(item.selectedIds, folder.id);
    },
    collect: (monitor) => ({
      isOver: monitor.isOver(),
    }),
  }));

  return (
    <div ref={dropRef} key={folder.id}>
      {/* or <Button ref={dropRef}>... */}
      {folder.name}
    </div>
  );
});
Now, when you drag a gallery over that folder element in the sidebar, you’ll see the drop highlight (isOver is true), and if you release the mouse, drop calls handleMoveGallery(item.selectedIds, folder.id).

Note: If you already have a <Button> for the folder, you may need to wrap it in a <div ref={dropRef}> or forward the ref to the button. Something like:

tsx
Copy
<Button
  ref={dropRef}   // <-- if your button component accepts a ref
  variant="ghost"
>
  {folder.name}
</Button>
(Or you can use a parent <div ref={dropRef}> <Button>...</Button> </div>.)

