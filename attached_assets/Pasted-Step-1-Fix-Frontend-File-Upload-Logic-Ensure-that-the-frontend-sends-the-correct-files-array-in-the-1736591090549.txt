Step 1: Fix Frontend File Upload Logic
Ensure that the frontend sends the correct files array in the body of the POST request.

Update the Request for Pre-Signed URLs: In UploadDropzone, update the logic for requesting signed URLs:

javascript
Copy code
const requestSignedUrls = async (files) => {
    if (!files.length) {
        throw new Error('No files provided for upload');
    }

    const response = await fetch(`/api/galleries/${gallerySlug}/images`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            files: files.map((file) => ({
                name: file.name,
                type: file.type,
                size: file.size,
            })),
        }),
    });

    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to get signed URLs');
    }

    return response.json(); // { urls: [...] }
};
Update onDrop Handler: Ensure that onDrop in UploadDropzone passes valid file details:

javascript
Copy code
const onDrop = useCallback(async (acceptedFiles) => {
    try {
        if (!acceptedFiles.length) {
            toast({
                title: 'No files selected',
                description: 'Please upload valid image files.',
                variant: 'destructive',
            });
            return;
        }

        setIsUploading(true);
        setUploadProgress(0);

        // Request pre-signed URLs for the accepted files
        const { urls } = await requestSignedUrls(acceptedFiles);

        // Upload files directly to R2
        await Promise.all(
            acceptedFiles.map(async (file, index) => {
                const { signedUrl, publicUrl } = urls[index];
                const uploadResponse = await fetch(signedUrl, {
                    method: 'PUT',
                    headers: { 'Content-Type': file.type },
                    body: file,
                });

                if (!uploadResponse.ok) {
                    throw new Error(`Failed to upload file: ${file.name}`);
                }

                console.log(`Uploaded file: ${file.name} -> ${publicUrl}`);
                setUploadProgress(((index + 1) / acceptedFiles.length) * 100);
            })
        );

        toast({
            title: 'Upload complete',
            description: 'All images were successfully uploaded!',
        });
    } catch (error) {
        console.error('Upload error:', error);
        toast({
            title: 'Upload failed',
            description: error.message,
            variant: 'destructive',
        });
    } finally {
        setIsUploading(false);
        setUploadProgress(0);
    }
}, [setIsUploading, setUploadProgress, gallerySlug]);
