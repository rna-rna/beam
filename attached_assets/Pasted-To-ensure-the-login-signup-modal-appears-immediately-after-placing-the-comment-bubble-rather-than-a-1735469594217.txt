To ensure the login/signup modal appears immediately after placing the comment bubble (rather than after clicking the comment field), the logic needs to shift to trigger the modal right after the bubble is placed.

Current Flow (Observed from Code):
Click the comment icon.
Place the comment bubble.
Modal only opens when clicking the comment input.
Why This Happens:
The modal is currently tied to the onClick or onSubmit event of the comment field inside CommentBubble.
The placement of the bubble (setNewCommentPos) happens, but no modal is triggered immediately.
Fix â€“ Trigger Modal After Bubble Placement (Gallery.tsx):
Modify the function responsible for handling the bubble placement (handleImageComment) to immediately check for user authentication after the bubble is placed and open the modal if unauthenticated.

Updated Code for Immediate Modal Trigger (Gallery.tsx):
tsx
Copy code
const handleImageComment = (event: React.MouseEvent<HTMLDivElement>) => {
  console.log('handleImageComment triggered'); // Debug log
  
  if (!isCommentPlacementMode) return;

  const rect = event.currentTarget.getBoundingClientRect();
  const x = ((event.clientX - rect.left) / rect.width) * 100;
  const y = ((event.clientY - rect.top) / rect.height) * 100;

  console.log('Setting comment position:', { x, y }); // Debug log
  setNewCommentPos({ x, y });

  // Immediately check if user is authenticated
  if (!user) {
    console.log('User not authenticated, triggering modal'); // Debug log
    setIsCommentModalOpen(true);
    return;
  }

  setIsCommentModalOpen(true);  // Open the modal for authenticated users as well
};
Why This Works:
The modal immediately triggers after placing the bubble if the user is unauthenticated.
The modal bypasses the need to click the input field.
Ensure Modal Renders Properly (Gallery.tsx):
tsx
Copy code
const renderCommentDialog = () => {
  if (!isCommentModalOpen) return null;

  return (
    <CommentModal
      isOpen={isCommentModalOpen}
      position={newCommentPos}
      onClose={() => {
        setIsCommentModalOpen(false);
        setNewCommentPos(null);
        console.log('Comment modal closed'); // Debug log
      }}
      onSubmit={(content) => {
        if (!selectedImage?.id || !newCommentPos) return;

        createCommentMutation.mutate({
          imageId: selectedImage.id,
          content,
          x: newCommentPos.x,
          y: newCommentPos.y,
        });

        setIsCommentModalOpen(false);
        setNewCommentPos(null);
      }}
    />
  );
};
